AWSTemplateFormatVersion: '2010-09-09'
Description: 'LambCI function and supporting services (see github.com/lambci/lambci for documentation)'
    
Parameters:

    Version:
        Description: 'LambCI version'
        Type: 'String'
        Default: '0.9.13'

    GithubToken:
        Description: 'GitHub OAuth token'
        Type: 'String'
        Default: ''
        NoEcho: 'true'
        AllowedPattern: '^$|^[0-9a-f]{40}$'
        ConstraintDescription: 'Must be empty or a 40 char GitHub token'

    Repositories:
        Description: '(optional) GitHub repos to add hook to, eg: facebook/react,emberjs/ember.js'
        Type: 'CommaDelimitedList'
        Default: ''

    SlackToken:
        Description: '(optional) Slack API token'
        Type: 'String'
        Default: ''
        NoEcho: 'true'
        AllowedPattern: '^$|^xox.-[0-9]+-.+'
        ConstraintDescription: 'Must be empty or a valid Slack token, eg: xoxb-1234'

    SlackChannel:
        Description: '(optional) Slack channel'
        Type: 'String'
        Default: '#general'
        AllowedPattern: '^$|^#.+'
        ConstraintDescription: 'Must be empty or a valid Slack channel, eg: #general'

Resources:

    BuildLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: { 'Fn::Sub': '${AWS::StackName}-build' }
            Description: { 'Fn::Sub': 'LambCI build function for stack: ${AWS::StackName}' }
            Handler: 'index.handler'
            MemorySize: '1536'
            Timeout: '300'
            Role: { 'Fn::GetAtt': [ 'LambdaExecutionRole', 'Arn' ] }
            Code:
                S3Bucket: { 'Fn::Sub': 'lambci-${AWS::Region}' }
                S3Key: { 'Fn::Sub': 'fn/lambci-build-${Version}.zip' }
            Runtime: 'nodejs8.10'

    BuildResults:
        Type: 'AWS::S3::Bucket'
        DeletionPolicy: "Retain"

    ConfigTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
            TableName: { 'Fn::Sub': '${AWS::StackName}-config' }
            AttributeDefinitions:
              - { AttributeName: 'project', AttributeType: 'S' }
            KeySchema:
              - { AttributeName: 'project', KeyType: 'HASH' }
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    BuildsTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
            TableName: { 'Fn::Sub': '${AWS::StackName}-builds' }
            AttributeDefinitions:
              - { AttributeName: 'project', AttributeType: 'S' }
              - { AttributeName: 'buildNum', AttributeType: 'N' }
              - { AttributeName: 'trigger', AttributeType: 'S' }
              - { AttributeName: 'commit', AttributeType: 'S' }
              - { AttributeName: 'requestId', AttributeType: 'S' }
            KeySchema:
              - { AttributeName: 'project', KeyType: 'HASH' }
              - { AttributeName: 'buildNum', KeyType: 'RANGE' }
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
            LocalSecondaryIndexes:
              - IndexName: 'trigger'
                KeySchema:
                  - { AttributeName: 'project', KeyType: 'HASH' }
                  - { AttributeName: 'trigger', KeyType: 'RANGE' }
                Projection:
                    ProjectionType: 'KEYS_ONLY'
              - IndexName: 'commit'
                KeySchema:
                  - { AttributeName: 'project', KeyType: 'HASH' }
                  - { AttributeName: 'commit', KeyType: 'RANGE' }
                Projection:
                    ProjectionType: 'KEYS_ONLY'
              - IndexName: 'requestId'
                KeySchema:
                  - { AttributeName: 'project', KeyType: 'HASH' }
                  - { AttributeName: 'requestId', KeyType: 'RANGE' }
                Projection:
                    ProjectionType: 'KEYS_ONLY'

    InvokeTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            TopicName: { 'Fn::Sub': 'infrastructure-lambci-snsinvoke-${AWS::Region}' }

    BuildLambdaSnsSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            Protocol: 'lambda'
            Endpoint: { 'Fn::GetAtt': [ 'BuildLambda', 'Arn' ] }
            TopicArn: { Ref: 'InvokeTopic' }

    LambdaInvoke:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName: { 'Fn::GetAtt': [ 'BuildLambda', 'Arn' ] }
            Action: 'lambda:InvokeFunction'
            Principal: 'sns.amazonaws.com'
            SourceArn: { Ref: 'InvokeTopic' }

    LambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    Effect: 'Allow'
                    Principal: { Service: 'lambda.amazonaws.com' }
                    Action: 'sts:AssumeRole'
            Policies:
              - PolicyName: 'WriteLogs'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action:
                          - 'logs:CreateLogGroup'
                          - 'logs:CreateLogStream'
                          - 'logs:PutLogEvents'
                        Resource: { 'Fn::Sub': 'arn:aws:logs:*:*:log-group:/aws/lambda/${AWS::StackName}-*' }
              - PolicyName: 'ReadWriteBucket'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action:
                          - 's3:GetObject'
                          - 's3:PutObject'
                          - 's3:PutObjectAcl'
                        Resource:
                          - { 'Fn::Sub': 'arn:aws:s3:::${BuildResults}/*' }
                          - { 'Fn::Sub': 'arn:aws:s3:::biometrix-infrastructure-us-west-2/cloudformation/*'}
                          - { 'Fn::Sub': 'arn:aws:s3:::biometrix-infrastructure-us-west-2/lambdas/*'}
                          - { 'Fn::Sub': 'arn:aws:s3:::biometrix-infrastructure-us-east-1/cloudformation/*'}
                          - { 'Fn::Sub': 'arn:aws:s3:::biometrix-infrastructure-us-east-1/lambdas/*'}
              - PolicyName: 'ReadTables'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action:
                          - 'dynamodb:BatchGetItem'
                          - 'dynamodb:GetItem'
                          - 'dynamodb:Query'
                          - 'dynamodb:Scan'
                        Resource: { 'Fn::Sub': 'arn:aws:dynamodb:*:*:table/${AWS::StackName}-*' }
              - PolicyName: 'WriteTables'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action:
                          - 'dynamodb:BatchWriteItem'
                          - 'dynamodb:DeleteItem'
                          - 'dynamodb:PutItem'
                          - 'dynamodb:UpdateItem'
                        Resource:
                          - { 'Fn::Sub': 'arn:aws:dynamodb:*:*:table/${AWS::StackName}-config' }
                          - { 'Fn::Sub': 'arn:aws:dynamodb:*:*:table/${AWS::StackName}-builds' }

              - PolicyName: 'UpdateSnsTopic'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action:
                          - 'sns:SetTopicAttributes'
                          - 'iam:PassRole'
                        Resource:
                          - { Ref: "InvokeTopic" }
                          - { 'Fn::GetAtt': [ 'SnsFailuresRole', 'Arn' ] }
            RoleName: { 'Fn::Sub': 'infrastructure-lambci-execute-${AWS::Region}' }

    SnsSender:
        Type: 'AWS::IAM::User'
        Properties:
            Policies:
              - PolicyName: 'PublishOnly'
                PolicyDocument:
                    Statement:
                        Effect: 'Allow'
                        Action: 'sns:Publish'
                        Resource: { Ref: 'InvokeTopic' }
            UserName: { 'Fn::Sub': 'infrastructure-lambci-snsinvoker-${AWS::Region}' }

    SnsAccessKey:
        Type: 'AWS::IAM::AccessKey'
        Properties:
            UserName: { 'Fn::Sub': 'infrastructure-lambci-snsinvoker-${AWS::Region}' }
        DependsOn:
          - 'SnsSender'

    SnsFailuresRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    Effect: 'Allow'
                    Principal: { Service: 'sns.amazonaws.com' }
                    Action: 'sts:AssumeRole'
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            RoleName: { 'Fn::Sub': 'infrastructure-lambci-snsfailures-${AWS::Region}' }

    ConfigUpdater:
        Type: 'Custom::ConfigUpdater'
        Properties:
            ServiceToken: { 'Fn::GetAtt': [ 'BuildLambda', 'Arn' ] }
            GithubToken: { Ref: 'GithubToken' }
            Repositories: { Ref: 'Repositories' }
            SlackToken: { Ref: 'SlackToken' }
            SlackChannel: { Ref: 'SlackChannel' }
            S3Bucket: { Ref: 'BuildResults' }
            SnsTopic: { Ref: 'InvokeTopic' }
            SnsAccessKey: { Ref: 'SnsAccessKey' }
            SnsSecret: { 'Fn::GetAtt': [ 'SnsAccessKey', 'SecretAccessKey' ] }
            SnsFailuresRole: { 'Fn::GetAtt': [ 'SnsFailuresRole', 'Arn' ] }

Outputs:
    S3Bucket:
        Description: 'Name of the build results S3 bucket, see github.com/lambci/lambci'
        Value: { Ref: 'BuildResults' }
    SnsTopic:
        Description: "Enter this for 'Sns topic' at github.com/<repo>/settings/hooks/new?service=amazonsns"
        Value: { Ref: 'InvokeTopic' }
    SnsRegion:
        Description: "Enter this for 'Sns region' at github.com/<repo>/settings/hooks/new?service=amazonsns"
        Value: { Ref: 'AWS::Region' }
    SnsAccessKey:
        Description: "Enter this for 'Aws key' at github.com/<repo>/settings/hooks/new?service=amazonsns"
        Value: { Ref: 'SnsAccessKey' }
    SnsSecret:
        Description: "Enter this for 'Aws secret' at github.com/<repo>/settings/hooks/new?service=amazonsns"
        Value: { "Fn::GetAtt": [ 'SnsAccessKey', 'SecretAccessKey' ] }
