# A template that creates a Meta service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2018 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Meta service environment"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the environment"

    MaintenanceWindowConfig:
        Type: "String"
        Default: "[]"
        Description: "The JSON maintenance window config"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "75121e414c6725f23e9b2cff9e158f538c61333b" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Environment"

        ParameterLabels:
            Environment: { default: "Environment" }

Resources:

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
            RoleName: { "Fn::Sub": "meta-${Environment}-apigateway-${AWS::Region}" }

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import json, os

                    def handler(event, context):
                        print(event)
                        ret = {
                            'maintenance_windows': json.loads(os.environ['MAINTENANCE_WINDOWS']),
                        }

                        body = json.dumps(ret)
                        return {
                            'statusCode': 200,
                            'headers': {
                                'Status': '200 Ok',
                                'Content-Type': 'application/json',
                                'Content-Length': len(body),
                                'Access-Control-Allow-Methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',
                                'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token',
                                'Access-Control-Allow-Origin': '*'

                            },
                            'body': body
                        }

            Environment:
                Variables:
                    SERVICE: 'meta'
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
                    MAINTENANCE_WINDOWS: { Ref: "MaintenanceWindowConfig" }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "meta-${Environment}-apigateway-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "meta-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "meta" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

    ApigatewayStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "meta"
                Environment: { Ref: "Environment" }
                Service: "apigateway"
                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "meta-${Environment}-apigateway" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "meta" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/apigateway.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 30
