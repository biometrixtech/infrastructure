# A template that creates an environment
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an environment for preprocessing Accessory data"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."
    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."
    MongoDbPeeringVpc:
        Type: "String"
        Default: ""
        Description: "MongoDB VPC ID"
    MongoDbPeeringCidr:
        Type: "String"
        Description: "MongoDB VPC CIDR range"
        Default: ""
        MaxLength: "18"
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

    ComputeEc2InstanceSize:
        Type: "String"
        AllowedValues: [
            "c3", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1", "f1.2xlarge", "f1.16xlarge",
            "g2", "g2.2xlarge", "g2.8xlarge",
            "i2", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m3", "m3.medium", "m3.large", "m3.2xlarge", "m3.xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "optimal",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Default: "m3.medium"
        Description: "What type the EC2 instances should be"
    ComputeEc2Ami:
        Type: "AWS::EC2::Image::Id"
        Default: "ami-20631a36"
        Description: "The AMI to build the EC2 instances from"
    ComputeEc2Keypair:
        Type: "String"
        Description: "A SSH keypair to grant access to instances"

    VpcTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure/cloudformation/vpc.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the VPC Stack"
    ComputeTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure/cloudformation/preprocessing-compute.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the EC2 Cluster"
    PipelineTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure/cloudformation/preprocessing-pipeline.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the StepFunctions pipeline"
    PollerTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure/cloudformation/sfn-batch-poller.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the sfn-batch poller cluster"

    BatchJobVersionDownloadandchunk:
        Type: "String"
        Description: "The version of the `downloadandchunk` batch job to run"
    BatchJobVersionSessionprocess2:
        Type: "String"
        Description: "The version of the `sessionprocess2` batch job to run"
    BatchJobVersionNoop:
        Type: "String"
        Description: "The version of the `noop` batch job to run"
    BatchJobVersionScoring:
        Type: "String"
        Description: "The version of the `scoring` batch job to run"
    BatchJobVersionDatabaseupload:
        Type: "String"
        Description: "The version of the `databaseupload` batch job to run"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"
          - Label: { default: "Templates" }
            Parameters:
              - "VpcTemplate"
              - "ComputeTemplate"
              - "PipelineTemplate"
              - "PollerTemplate"
          - Label: { default: "Configuration" }
            Parameters:
              - "MultiAz"
              - "VpnCidr"
              - "MongoDbPeeringVpc"
              - "MongoDbPeeringCidr"
              - "ComputeEc2InstanceSize"
              - "ComputeEc2Ami"
              - "ComputeEc2Keypair"
          - Label: { default: "Batch Jobs" }
            Parameters:
              - "BatchJobVersionDownloadandchunk"
              - "BatchJobVersionSessionprocess2"
              - "BatchJobVersionNoop"
              - "BatchJobVersionScoring"
              - "BatchJobVersionDatabaseupload"

        ParameterLabels:
            Environment: { default: "Environment" }
            MultiAz: { default: "Multi AZ?" }
            ComputeEc2InstanceSize: { default: "EC2 Instance Size" }
            ComputeEc2Ami: { default: "EC2 AMI" }
            ComputeEc2Keypair: { default: "EC2 Keypair" }
            ComputeTemplate: { default: "CF template: Compute Cluster" }
            PipelineTemplate: { default: "CF template: Pipeline" }
            PollerTemplate: { default: "CF template: sfn-batch poller" }
            BatchJobVersionDownloadandchunk: { default: "downloadandchunk" }
            BatchJobVersionSessionprocess2: { default: "sessionprocess2" }
            BatchJobVersionNoop: { default: "noop" }
            BatchJobVersionScoring: { default: "scoring" }
            BatchJobVersionDatabaseupload: { default: "databaseupload" }
            MongoDbPeeringVpc: { default: "MongoDB VPN ID" }
            MongoDbPeeringCidr: { default: "MongoDB VPN CIDR" }

Conditions:
    CreateComputeCluster: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "ComputeTemplate" }, "" ] } ] }
    CreatePipeline: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PipelineTemplate" }, "" ] } ] }
    CreatePoller: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PollerTemplate" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  S3
    ##########################################################################################################

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: { "Fn::Sub": "biometrix-preprocessing-${Environment}-${AWS::Region}" }
            NotificationConfiguration: { "Fn::If": [
                "CreatePipeline",
                { "LambdaConfigurations": [ { "Event": "s3:ObjectCreated:*", "Function": { "Fn::GetAtt": [ "PipelineCluster", "Outputs.TriggerLambdaArn" ] } } ] },
                { Ref: "AWS::NoValue" }
            ]}
            Tags:
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        # Don't delete this if we accidentally delete the stack (which would fail anyway unless the bucket is empty)
        DeletionPolicy : "Retain"

    LambdaTriggerPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.TriggerLambdaArn" ] }
            Principal: "s3.amazonaws.com"
            SourceArn: { "Fn::Sub": "arn:aws:s3:::biometrix-preprocessing-${Environment}-${AWS::Region}" }
            SourceAccount: { Ref : "AWS::AccountId" }
        Condition: "CreatePipeline"

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    VpcStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                MultiAz: { Ref: "MultiAz" }
                PeeringCidr: { Ref: "MongoDbPeeringCidr" }
                PeeringVpc: { Ref: "MongoDbPeeringVpc" }
                Project: "preprocessing"
                Service: "compute"
                VpnCidr: { Ref: "VpnCidr" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "compute" }
            TemplateURL: { Ref: "VpcTemplate" }
            TimeoutInMinutes: 10

    ##########################################################################################################
    ##  COMPUTE CLUSTER
    ##########################################################################################################

    ComputeCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Ami: { Ref: "ComputeEc2Ami" }
                Environment: { Ref: "Environment" }
                InstanceSize: { Ref: "ComputeEc2InstanceSize" }
                Keypair: { Ref: "ComputeEc2Keypair" }
                MultiAz: { Ref: "MultiAz" }
                PrivateHostedZoneId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateHostedZoneId" ] }
                PrivateSubnetAlphaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetAlphaId" ] }
                PrivateSubnetBetaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] }
                PublicSubnetAlphaId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PublicSubnetAlphaId" ] }
                VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
                VpcCidr: { Ref: "VpnCidr" }

            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "compute" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "public" }
            TemplateURL: { Ref: "ComputeTemplate" }
            TimeoutInMinutes: 10
        Condition: "CreateComputeCluster"

    ##########################################################################################################
    ##  PIPELINE
    ##########################################################################################################

    PipelineCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                BatchJobVersionDownloadandchunk: { Ref: "BatchJobVersionDownloadandchunk" }
                BatchJobVersionSessionprocess2: { Ref: "BatchJobVersionSessionprocess2" }
                BatchJobVersionNoop: { Ref: "BatchJobVersionNoop" }
                BatchJobVersionScoring: { Ref: "BatchJobVersionScoring" }
                BatchJobVersionDatabaseupload: { Ref: "BatchJobVersionDatabaseupload" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "compute" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "public" }
            TemplateURL: { Ref: "PipelineTemplate" }
            TimeoutInMinutes: 10
        Condition: "CreatePipeline"

    ##########################################################################################################
    ##  SFN-BATCH POLLER
    ##########################################################################################################

    PollerCluster:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "preprocessing"
                Environment: { Ref: "Environment" }
                Vpc: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
                PrivateSubnets: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetIds" ] }
                ActivityArn: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.ActivityArn" ] }
                SqsQueueName: { "Fn::GetAtt": [ "PipelineCluster", "Outputs.LinearitySqsQueueName" ] }
                InstanceSize: "t2.micro"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-sfn-batch-poller" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "compute" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "public" }
            TemplateURL: { Ref: "PollerTemplate" }
            TimeoutInMinutes: 10
        Condition: "CreatePoller"

    ##########################################################################################################
    ##  MONITORING
    ##########################################################################################################

    CloudWatchDashboard:
        Type: "AWS::CloudWatch::Dashboard"
        Properties:
            DashboardName: { "Fn::Sub": "preprocessing-${Environment}-${AWS::Region}" }
            DashboardBody: !Sub |
                { "widgets":[
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 0,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [
                                    "Preprocessing",
                                    "BatchComputeEnvironmentDesiredCpus",
                                    "ComputeEnvironment", "${ComputeCluster.Outputs.ComputeEnvironmentArn}",
                                    "Environment", "${Environment}"
                                ],
                                [ ".", "BatchComputeEnvironmentActualCpus", ".", ".", ".", "." ]
                            ],
                            "period": 60,
                            "stat": "Average",
                            "region": "${AWS::Region}",
                            "title": "ComputeCluster CPUs",
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            }
                        }
                    },
                    {
                        "type":"metric",
                        "x": 12,
                        "y": 0,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [
                                    "Preprocessing",
                                    "BatchJobQueueCountSubmitted",
                                    "JobQueue", "${ComputeCluster.Outputs.JobQueueArn}",
                                    "Environment", "${Environment}"
                                ],
                                [ ".", "BatchJobQueueCountPending", ".", ".", ".", "." ],
                                [ ".", "BatchJobQueueCountRunnable", ".", ".", ".", "." ],
                                [ ".", "BatchJobQueueCountStarting", ".", ".", ".", "." ],
                                [ ".", "BatchJobQueueCountRunning", ".", ".", ".", "." ]
                            ],
                            "period": 60,
                            "stacked": true,
                            "stat": "Average",
                            "region": "${AWS::Region}",
                            "title": "JobQueue Job count",
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            }
                        }
                    },
                    {
                        "type":"metric",
                        "x": 0,
                        "y": 6,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [
                                    "Preprocessing",
                                    "BatchJobScheduleLatency",
                                    "Environment", "${Environment}",
                                    "Job", "downloadandchunk"
                                ],
                                [ ".", ".", ".", ".", ".", "sessionprocess2" ],
                                [ ".", ".", ".", ".", ".", "scoring" ],
                                [ ".", ".", ".", ".", ".", "writemongo" ]
                            ],
                            "period": 60,
                            "stat": "Average",
                            "region": "${AWS::Region}",
                            "title": "Batch Latency"
                        }
                    },
                    {
                        "type":"metric",
                        "x": 12,
                        "y": 6,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [
                                    "Preprocessing",
                                    "BatchJobProcessTime",
                                    "Environment", "${Environment}",
                                    "Job", "downloadandchunk"
                                ],
                                [ ".", ".", ".", ".", ".", "sessionprocess2" ],
                                [ ".", ".", ".", ".", ".", "scoring" ],
                                [ ".", ".", ".", ".", ".", "writemongo" ]
                            ],
                            "period": 60,
                            "stat": "Average",
                            "region": "${AWS::Region}",
                            "title": "Batch Process Time"
                        }
                    },
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 12,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "arn:aws:states:us-west-2:887689817172:stateMachine:StateMachine-4ENQYJODFNYT" ],
                                [ ".", "ExecutionsFailed", ".", "." ],
                                [ ".", "ExecutionsSucceeded", ".", "." ]
                            ],
                            "region": "${AWS::Region}",
                            "stacked": true,
                            "title": "StepFunctions executions",
                            "view": "timeSeries"
                        }
                    },
                    {
                        "type": "metric",
                        "x": 12,
                        "y": 12,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "metrics": [
                                [
                                    "Preprocessing",
                                    "BatchEfsSize",
                                    "ComputeEnvironment", "${ComputeCluster.Outputs.ComputeEnvironmentArn}",
                                    "Environment", "${Environment}"
                                ]
                            ],
                            "region": "${AWS::Region}",
                            "title": "EFS filesystem size",
                            "view": "timeSeries"
                        }
                    }
                ] }
        Condition: "CreateComputeCluster"
