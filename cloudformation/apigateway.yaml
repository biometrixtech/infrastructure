# A template that creates the Stats API service
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Stats API environment"
Parameters:

    Project:
        Type: "String"
        Description: "The name of the Project"

    Environment:
        Type: "String"
        Description: "The name of the environment"

    Service:
        Type: "String"
        Description: "The name of the service"

    LambdaArn:
        Type: "String"
        Description: "The ARN of the Lambda function to be invoked"

    CustomAuthLambdaArn:
        Type: "String"
        Description: "The ARN of the Lambda function to be invoked for custom authentication"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Project"
              - "Environment"
              - "Service"
          - Label: { default: "Endpoint" }
            Parameters:
              - "LambdaArn"

        ParameterLabels:
            Project: { default: "Project" }
            Environment: { default: "Environment" }
            Service: { default: "Service" }
            LambdaArn: { default: "Lambda ARN" }

Resources:

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: { Ref: "LambdaArn" }
            Principal: "apigateway.amazonaws.com"
            SourceArn: { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*" }

    CustomAuthLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: { Ref: "CustomAuthLambdaArn" }
            Principal: "apigateway.amazonaws.com"
            SourceArn: { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*" }

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    RestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: { "Fn::Sub": "${Project} - ${Environment}" }
            Description: { "Fn::Sub": "${Project} service (${Environment} environment)" }
            FailOnWarnings: true
            Body:
                swagger: "2.0"
                info:
                    version: "2016-08-18T18:08:34Z"
                    title: { "Fn::Sub": "${Project} - ${Environment}" }
                basePath: "/LATEST"
                schemes: [ "https" ]
                paths:
                    "/{endpoint+}":
                        x-amazon-apigateway-any-method:
                            parameters:
                              - name: "Authorization"
                                in: "header"
                                required: true
                                type: "string"
                            produces: [ "application/json" ]
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin: { type: "string" }
                                        Access-Control-Allow-Methods: { type: "string" }
                                        Access-Control-Allow-Headers: { type: "string" }
                                "400":
                                    description: "400 response"
                                    headers:
                                        Access-Control-Allow-Origin: { type: "string" }
                                        Access-Control-Allow-Methods: { type: "string" }
                                        Access-Control-Allow-Headers: { type: "string" }
                                "404":
                                    description: "404 response"
                                    headers:
                                        Access-Control-Allow-Origin: { type: "string" }
                                        Access-Control-Allow-Methods: { type: "string" }
                                        Access-Control-Allow-Headers: { type: "string" }
                                "500":
                                    description: "500 response"
                                    headers:
                                        Access-Control-Allow-Origin: { type: "string" }
                                        Access-Control-Allow-Methods: { type: "string" }
                                        Access-Control-Allow-Headers: { type: "string" }
                            security: [ { CustomAuth: [] } ]
                            x-amazon-apigateway-integration:
                                requestTemplates:
                                    "application/json": |
                                        {
                                            "endpoint": "$input.params().get('path').get('endpoint')",
                                            "auth": {
                                                "principal": "$context.authorizer.principalId",
                                                "jwt": "$input.params().get('header').get('Authorization')"
                                            },
                                            "body-json" : $input.json('$'),

                                            "stage-variables" : {
                                        #foreach($key in $stageVariables.keySet())
                                                "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                                            #if($foreach.hasNext),#end
                                        #end
                                            },
                                            "context" : {
                                                "account-id" : "$context.identity.accountId",
                                                "api-id" : "$context.apiId",
                                                "api-key" : "$context.identity.apiKey",
                                                "http-method" : "$context.httpMethod",
                                                "stage" : "$context.stage",
                                                "source-ip" : "$context.identity.sourceIp",
                                                "user" : "$context.identity.user",
                                                "user-agent" : "$context.identity.userAgent",
                                                "user-arn" : "$context.identity.userArn",
                                                "request-id" : "$context.requestId",
                                                "resource-id" : "$context.resourceId",
                                                "resource-path" : "$context.resourcePath"
                                            }
                                        }
                                uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations" }
                                passthroughBehavior: "never"
                                responses:
                                    InvalidAuthentication:
                                        statusCode: '400'
                                        responseTemplates:
                                            application/json: |-
                                                {
                                                  "type" : "InvalidAuthentication",
                                                  "message" : "The given authentication token is invalid"
                                                }
                                    UnrecognisedEndpoint:
                                        statusCode: '404'
                                        responseTemplates:
                                            application/json: |-
                                                {
                                                  "type" : "UnrecognisedEndpoint",
                                                  "message" : "The endpoint requested is not valid"
                                                }
                                    ServerError:
                                        statusCode: '500'
                                        responseTemplates:
                                            application/json: |-
                                                {
                                                    "type" : "ServerError",
                                                    "message" : "A server error occurred",
                                                    "errorMessage": $input.json('$.errorMessage'),
                                                    "stackTrace": $input.json('$.stackTrace')
                                                }
                                    default:
                                        statusCode: '200'
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                httpMethod: "POST"
                                type: "aws"

                        options:
                            consumes:
                              - "application/json"
                            produces:
                              - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin: { type: "string" }
                                        Access-Control-Allow-Methods: { type: "string" }
                                        Access-Control-Allow-Headers: { type: "string" }
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: "never"
                                requestTemplates:
                                    application/json: "{\"statusCode\": 200}"
                                type: "mock"
                securityDefinitions:
                    CustomAuth:
                        type: "apiKey"
                        name: "Authorization"
                        in: "header"
                        x-amazon-apigateway-authtype: "oauth2"
                        x-amazon-apigateway-authorizer:
                            type: "token"
                            authorizerUri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomAuthLambdaArn}/invocations" }
                            identityValidationExpression: ""
                            authorizerResultTtlInSeconds: 60

    ApiDeployment:
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: { Ref: "RestApi" }
            StageName: "v1"
            StageDescription:
                DataTraceEnabled: true
                Description: { "Fn::Sub": 'Deployment of ${Project}' }
                LoggingLevel: 'INFO'
                MetricsEnabled: true

    CustomDomainName:
        Type: 'AWS::ApiGateway::DomainName'
        Properties:
            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
            CertificateArn: { "Fn::ImportValue": { "Fn::Sub": "FathomaiSslCertificateArnVirginia-${Environment}" } }

    CustomDomainBasePathMapping:
        Type: "AWS::ApiGateway::BasePathMapping"
        Properties:
            BasePath: 'v1'
            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
            RestApiId: { Ref: "RestApi" }
            Stage: 'v1'
        DependsOn:
          - "ApiDeployment"
          - "CustomDomainName"

    CustomDomainCnameRecords:
        Type: "AWS::Route53::RecordSet"
        Properties:
            HostedZoneId: { "Fn::ImportValue": { "Fn::Sub": "FathomaiHostedZoneId-${Environment}" } }
            Comment: "Stats API"
            Name: { "Fn::Sub": "${Project}.${Environment}.fathomai.com." }
            Type: "CNAME"
            TTL: "600"
            ResourceRecords: [ { "Fn::GetAtt": [ "CustomDomainName", "DistributionDomainName" ] } ]
