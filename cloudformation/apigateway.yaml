# A template that creates the Stats API service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an API Gateway interface which delivers requests to a given Lambda function"
Parameters:

    Project:
        Type: "String"
        Description: "The name of the Project"

    Environment:
        Type: "String"
        Description: "The name of the environment"

    Service:
        Type: "String"
        Description: "The name of the service"

    LambdaArn:
        Type: "String"
        Description: "The ARN of the Lambda function to be invoked"

    CreateCustomDomain:
        Type: "String"
        Description: "Whether to mount the API Gateway at <service>.<env>.fathomai.com"
        AllowedValues: [ "true", "false" ]
        Default: "false"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Project"
              - "Environment"
              - "Service"
          - Label: { default: "Endpoint" }
            Parameters:
              - "LambdaArn"

        ParameterLabels:
            Project: { default: "Project" }
            Environment: { default: "Environment" }
            Service: { default: "Service" }
            LambdaArn: { default: "Lambda ARN" }

Conditions:
    CreateCustomDomain: { "Fn::Equals": [ { Ref: "CreateCustomDomain" }, "true" ] }


Resources:

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: { "Fn::Sub": "${LambdaArn}:latest" }
            Principal: "apigateway.amazonaws.com"
            SourceArn: { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*" }

    LambdaLatestAlias:
        Type: "AWS::Lambda::Alias"
        Properties:
            FunctionName: { Ref: "LambdaArn" }
            FunctionVersion: '$LATEST'
            Name: 'latest'

    ##########################################################################################################
    ##  ASYNC SQS
    ##########################################################################################################

    AsyncSqsQueue:
        Type: "AWS::SQS::Queue"
        Properties:
            DelaySeconds: 0
            QueueName: { "Fn::Sub": "${Project}-${Environment}-${Service}-async" }
            VisibilityTimeout: 300

    AsyncLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "sqs:SendMessage"
                        Effect: "Allow"
                        Resource: { "Fn::GetAtt": [ "AsyncSqsQueue", "Arn" ] }
                      - Action:
                          - "lambda:InvokeFunction"
                        Effect: "Allow"
                        Resource: { Ref: 'LambdaArn' }
            RoleName: { "Fn::Sub": "${Project}-${Environment}-${Service}-async-${AWS::Region}" }

    AsyncConsumerLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, datetime, json, os
                    def handler(event, _):
                        print(json.dumps(event))
                        now = datetime.datetime.now()
                        event = json.loads(event['Records'][0]['body'])

                        if 'X-Execute-At' in event['headers']:
                            execute_at = datetime.datetime.strptime(event['headers']['X-Execute-At'], "%Y-%m-%dT%H:%M:%SZ")
                            if execute_at > now:
                                print('Not executing yet')
                                boto3.client('sqs').send_message(
                                    QueueUrl=os.environ['SQS_QUEUE_URL'],
                                    MessageBody=json.dumps(event),
                                    DelaySeconds=max(0, min(int((execute_at - datetime.datetime.now()).total_seconds()), 15*60)),
                                )
                                return

                        boto3.client('lambda').invoke(FunctionName=os.environ['LAMBDA_ARN'], Payload=json.dumps(event))
            Environment:
                Variables:
                    SQS_QUEUE_URL: { Ref: 'AsyncSqsQueue' }
                    LAMBDA_ARN: { Ref: 'LambdaArn' }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "5"
            Role: { "Fn::GetAtt" : [ "AsyncLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "${Project}-${Environment}-${Service}-asyncconsumer" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-asyncconsumer" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: 'Project' } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: 'Service' } }

    AsyncLambdaInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName: { Ref: 'LambdaArn' }
            Action: 'lambda:InvokeFunction'
            Principal: 'sqs.amazonaws.com'
            SourceArn: { "Fn::GetAtt": [ 'AsyncSqsQueue', "Arn" ] }

    AsyncLambdaTriggerMapping:
        Type: "AWS::Lambda::EventSourceMapping"
        Properties:
            BatchSize: 1
            Enabled: true
            EventSourceArn: { "Fn::GetAtt": [ 'AsyncSqsQueue', "Arn" ] }
            FunctionName: { Ref: "AsyncConsumerLambda" }

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    RestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: { "Fn::Sub": "${Project}-${Environment}-${Service}" }
            Description: { "Fn::Sub": "${Project} service (${Environment} environment)" }
            FailOnWarnings: true
            Body:
                swagger: "2.0"
                info:
                    version: "2016-08-18T18:08:34Z"
                    title: { "Fn::Sub": "${Project}-${Environment}-${Service}" }
                basePath: "/LATEST"
                schemes:
                  - "https"
                paths:
                    "/{endpoint+}":
                        options:
                            consumes:
                              - "application/json"
                            produces:
                              - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: "never"
                                requestTemplates:
                                    application/json: "{\"statusCode\": 200}"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            parameters:
                              - name: "Authorization"
                                in: "header"
                                required: true
                                type: "string"
                            consumes:
                              - "application/json"
                            produces:
                              - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "400":
                                    description: "400 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "404":
                                    description: "404 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "500":
                                    description: "500 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: '200'
                                uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}:${!stageVariables.LambdaAlias}/invocations" }
                                httpMethod: "POST"
                                passthroughBehavior: "when_no_match"
                                type: "aws_proxy"
                x-amazon-apigateway-binary-media-types:
                  - "application/octet-stream"

    ApiDeployment2:
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: { Ref: "RestApi" }

    ApiStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            RestApiId: { Ref: "RestApi" }
            StageName: "latest"
            DeploymentId: { Ref: "ApiDeployment2" }
            Description: { "Fn::Sub": 'Deployment of ${Project}' }
            Variables:
                LambdaAlias: 'latest'

#    CustomDomainName:
#        Type: 'AWS::ApiGateway::DomainName'
#        Properties:
#            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
#            CertificateArn: { "Fn::ImportValue": { "Fn::Sub": "FathomaiSslCertificateArnVirginia-${Environment}" } }
#        Condition: "CreateCustomDomain"
#
#    CustomDomainBasePathMapping:
#        Type: "AWS::ApiGateway::BasePathMapping"
#        Properties:
#            BasePath: 'v1'
#            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
#            RestApiId: { Ref: "RestApi" }
#            Stage: 'v1'
#        Condition: "CreateCustomDomain"
#        DependsOn:
#          - "ApiDeployment"
#          - "CustomDomainName"
#
#    CustomDomainCnameRecords:
#        Type: "AWS::Route53::RecordSet"
#        Properties:
#            HostedZoneId: { "Fn::ImportValue": { "Fn::Sub": "FathomaiHostedZoneId-${Environment}" } }
#            Comment: "Stats API"
#            Name: { "Fn::Sub": "${Project}.${Environment}.fathomai.com." }
#            Type: "CNAME"
#            TTL: "600"
#            ResourceRecords: [ { "Fn::GetAtt": [ "CustomDomainName", "DistributionDomainName" ] } ]
#        Condition: "CreateCustomDomain"

    ApiDomainBasePathMapping:
        Type: "AWS::ApiGateway::BasePathMapping"
        Properties:
            BasePath: { Ref: "Project" }
            DomainName: { "Fn::Sub": "apis.${Environment}.fathomai.com" }
            RestApiId: { Ref: "RestApi" }
        DependsOn:
          - "ApiStage"
