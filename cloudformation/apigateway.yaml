# A template that creates the Stats API service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an API Gateway interface which delivers requests to a given Lambda function"
Parameters:

    Project:
        Type: "String"
        Description: "The name of the Project"

    Environment:
        Type: "String"
        Description: "The name of the environment"

    Service:
        Type: "String"
        Description: "The name of the service"

    LambdaArn:
        Type: "String"
        Description: "The ARN of the Lambda function to be invoked"

    CreateCustomDomain:
        Type: "String"
        Description: "Whether to mount the API Gateway at <service>.<env>.fathomai.com"
        AllowedValues: [ "true", "false" ]
        Default: "false"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Project"
              - "Environment"
              - "Service"
          - Label: { default: "Endpoint" }
            Parameters:
              - "LambdaArn"

        ParameterLabels:
            Project: { default: "Project" }
            Environment: { default: "Environment" }
            Service: { default: "Service" }
            LambdaArn: { default: "Lambda ARN" }

Conditions:
    CreateCustomDomain: { "Fn::Equals": [ { Ref: "CreateCustomDomain" }, "true" ] }


Resources:

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: { "Fn::Sub": "${LambdaArn}:latest" }
            Principal: "apigateway.amazonaws.com"
            SourceArn: { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*" }

    LambdaLatestAlias:
        Type: "AWS::Lambda::Alias"
        Properties:
            FunctionName: { Ref: "LambdaArn" }
            FunctionVersion: '$LATEST'
            Name: 'latest'

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    RestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: { "Fn::Sub": "${Project}-${Environment}-${Service}" }
            Description: { "Fn::Sub": "${Project} service (${Environment} environment)" }
            FailOnWarnings: true
            Body:
                swagger: "2.0"
                info:
                    version: "2016-08-18T18:08:34Z"
                    title: { "Fn::Sub": "${Project}-${Environment}-${Service}" }
                basePath: "/LATEST"
                schemes:
                  - "https"
                paths:
                    "/{endpoint+}":
                        options:
                            consumes:
                              - "application/json"
                            produces:
                              - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: "never"
                                requestTemplates:
                                    application/json: "{\"statusCode\": 200}"
                                type: "mock"
                        x-amazon-apigateway-any-method:
                            parameters:
                              - name: "Authorization"
                                in: "header"
                                required: true
                                type: "string"
                            consumes:
                              - "application/json"
                            produces:
                              - "application/json"
                            responses:
                                "200":
                                    description: "200 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "400":
                                    description: "400 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "404":
                                    description: "404 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                                "500":
                                    description: "500 response"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: '200'
                                uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}:${!stageVariables.LambdaAlias}/invocations" }
                                httpMethod: "POST"
                                passthroughBehavior: "when_no_match"
                                type: "aws_proxy"
                x-amazon-apigateway-binary-media-types:
                  - "application/octet-stream"

    ApiDeployment2:
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: { Ref: "RestApi" }

    ApiStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            RestApiId: { Ref: "RestApi" }
            StageName: "latest"
            DeploymentId: { Ref: "ApiDeployment2" }
            Description: { "Fn::Sub": 'Deployment of ${Project}' }
            Variables:
                LambdaAlias: 'LATEST'

#    CustomDomainName:
#        Type: 'AWS::ApiGateway::DomainName'
#        Properties:
#            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
#            CertificateArn: { "Fn::ImportValue": { "Fn::Sub": "FathomaiSslCertificateArnVirginia-${Environment}" } }
#        Condition: "CreateCustomDomain"
#
#    CustomDomainBasePathMapping:
#        Type: "AWS::ApiGateway::BasePathMapping"
#        Properties:
#            BasePath: 'v1'
#            DomainName: { "Fn::Sub": "${Project}.${Environment}.fathomai.com" }
#            RestApiId: { Ref: "RestApi" }
#            Stage: 'v1'
#        Condition: "CreateCustomDomain"
#        DependsOn:
#          - "ApiDeployment"
#          - "CustomDomainName"
#
#    CustomDomainCnameRecords:
#        Type: "AWS::Route53::RecordSet"
#        Properties:
#            HostedZoneId: { "Fn::ImportValue": { "Fn::Sub": "FathomaiHostedZoneId-${Environment}" } }
#            Comment: "Stats API"
#            Name: { "Fn::Sub": "${Project}.${Environment}.fathomai.com." }
#            Type: "CNAME"
#            TTL: "600"
#            ResourceRecords: [ { "Fn::GetAtt": [ "CustomDomainName", "DistributionDomainName" ] } ]
#        Condition: "CreateCustomDomain"

    ApiDomainBasePathMapping:
        Type: "AWS::ApiGateway::BasePathMapping"
        Properties:
            BasePath: { Ref: "Project" }
            DomainName: { "Fn::Sub": "apis.${Environment}.fathomai.com" }
            RestApiId: { Ref: "RestApi" }
        DependsOn:
          - "ApiStage"
