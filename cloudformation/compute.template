# A template that creates a compute environment
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Batch Compute Environment for the pre-processing pipeline"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."

    InstanceSize:
        Type: "String"
        AllowedValues: [
            "r3.8xlarge", "r3", "r4", "optimal", "m4.10xlarge", "m3.xlarge", "r4.16xlarge", "f1", "m4.xlarge",
            "i3.8xlarge", "g2.2xlarge", "m4.2xlarge", "c3.4xlarge", "i3.4xlarge", "p2.16xlarge", "c4.2xlarge",
            "d2.xlarge", "g2.8xlarge", "d2.8xlarge", "x1.16xlarge", "r3.2xlarge", "f1.16xlarge", "g2", "c3",
            "x1.32xlarge", "c4", "r4.4xlarge", "d2.2xlarge", "m4.large", "i2.xlarge", "x1", "m4.4xlarge", "c4.8xlarge",
            "f1.2xlarge", "i2.2xlarge", "p2.xlarge", "p2", "i2.8xlarge", "c4.large", "r3.xlarge", "r3.large", "d2",
            "r4.xlarge", "c4.4xlarge", "m3.2xlarge", "c4.xlarge", "c3.xlarge", "r4.8xlarge", "m3.medium", "r4.2xlarge",
            "i3.2xlarge", "m3", "i3.16xlarge", "m4", "r4.large", "m4.16xlarge", "i2", "i3", "c3.2xlarge", "c3.large",
            "i2.4xlarge", "m3.large", "i3.xlarge", "p2.8xlarge", "d2.4xlarge", "c3.8xlarge", "r3.4xlarge"
        ]
        Description: "What type the EC2 instances should be"

    Ami:
        Type: "AWS::EC2::Image::Id"
        Default: "ami-45224425"
        Description: "The AMI to build the Compute Environment EC2 instances from"

    Keypair:
        Type: "String"
        Default: ""
        Description: "A SSH keypair to grant access to instances"
        
Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"
          - Label: { default: "Configuration" }
            Parameters:
              - "MultiAz"
              - "Ec2InstanceSize"
              - "Ec2Ami"
              - "Ec2Keypair"
            
        ParameterLabels:
            Environment: { default: "Environment" }
            MultiAz: { default: "Multi AZ?" }
            HostedZoneId: { default: "Hosted Zone" }
            InstanceSize: { default: "EC2 Instance Size" }
            Ami: { default: "EC2 AMI" }
            Keypair: { default: "EC2 Keypair" }

Conditions:
    MultiAz: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "MultiAz" }, "false" ] } ] }
    AllowSsh: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "Keypair" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    Vpc:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: { "Fn::Sub": "10.0.0.0/16" }
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            InstanceTenancy: "default"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties :
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    InternetGatewayVpcAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            VpcId: { Ref: "Vpc" }
            InternetGatewayId: { Ref: "InternetGateway" }

    ##########################################################################################################
    ##  PUBLIC AZ ALPHA
    ##########################################################################################################

    PublicSubnetAlpha:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.0.0.0/24" }
            MapPublicIpOnLaunch: true
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "a" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-public-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    PublicRouteTableAlpha:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-public-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    PublicSubnetAlphaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PublicSubnetAlpha" }
            RouteTableId: { Ref: "PublicRouteTableAlpha" }

    PublicRouteAlpha:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableAlpha" }
            GatewayId: { Ref: "InternetGateway" }
            DestinationCidrBlock: "0.0.0.0/0"

    NatGatewayEipAlpha:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    NatGatewayAlpha:
        DependsOn: "InternetGatewayVpcAttachment"
        Type: "AWS::EC2::NatGateway"
        Properties:
            AllocationId: { "Fn::GetAtt" : [ "NatGatewayEipAlpha", "AllocationId" ] }
            SubnetId: { Ref: "PublicSubnetAlpha" }

    ##########################################################################################################
    ##  PUBLIC AZ BETA
    ##########################################################################################################

    PublicSubnetBeta:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock:  { "Fn::Sub": "10.0.100.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "b" ] ] }
            MapPublicIpOnLaunch: true
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-public-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "MultiAz"

    PublicRouteTableBeta:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-public-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "MultiAz"

    PublicSubnetBetaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PublicSubnetBeta" }
            RouteTableId: { Ref: "PublicRouteTableBeta" }
        Condition: "MultiAz"

    PublicRouteBeta:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableBeta" }
            GatewayId: { Ref: "InternetGateway" }
            DestinationCidrBlock: "0.0.0.0/0"
        Condition: "MultiAz"

    NatGatewayEipBeta:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
        Condition: "MultiAz"

    NatGatewayBeta:
        DependsOn: "InternetGatewayVpcAttachment"
        Type: "AWS::EC2::NatGateway"
        Properties:
            AllocationId: { "Fn::GetAtt" : [ "NatGatewayEipBeta", "AllocationId" ] }
            SubnetId: { Ref: "PublicSubnetBeta" }
        Condition: "MultiAz"

    ##########################################################################################################
    ##  PRIVATE AZ ALPHA
    ##########################################################################################################

    PrivateSubnetAlpha:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.0.1.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "a" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-private-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    PrivateRouteTableAlpha:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-private-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    PrivateSubnetAlphaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PrivateSubnetAlpha" }
            RouteTableId: { Ref: "PrivateRouteTableAlpha" }

    PrivateRouteAlpha:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableAlpha" }
            NatGatewayId: { Ref: "NatGatewayAlpha" }
            DestinationCidrBlock: "0.0.0.0/0"

    ##########################################################################################################
    ##  PRIVATE AZ BETA
    ##########################################################################################################

    PrivateSubnetBeta:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.0.101.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "b" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-private-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "MultiAz"

    PrivateRouteTableBeta:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-private-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "MultiAz"

    PrivateSubnetBetaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PrivateSubnetBeta" }
            RouteTableId: { Ref: "PrivateRouteTableBeta" }
        Condition: "MultiAz"

    PrivateRouteBeta:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableBeta" }
            NatGatewayId: { Ref: "NatGatewayBeta" }
            DestinationCidrBlock: "0.0.0.0/0"
        Condition: "MultiAz"

    ##########################################################################################################
    ##  ENDPOINTS
    ##########################################################################################################

    # An S3 endpoint provides a direct connection from the EC2 instances to S3; providing lower latency
    # and without incurring network bandwidth charges.  Note that currently they don't support commands like
    # sync between S3 buckets in different regions :(
    S3Endpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            RouteTableIds: { "Fn::If": [
                "MultiAz",
                [
                    { Ref: "PublicRouteTableAlpha" },
                    { Ref: "PrivateRouteTableAlpha" },
                    { Ref: "PublicRouteTableBeta" },
                    { Ref: "PrivateRouteTableBeta" }
                ],
                [
                    { Ref: "PublicRouteTableAlpha" },
                    { Ref: "PrivateRouteTableAlpha" }
                ]
            ] }
            ServiceName: { "Fn::Sub": "com.amazonaws.${AWS::Region}.s3" }
            VpcId: { Ref: "Vpc" }

    ##########################################################################################################
    ##  ROUTE53
    ##########################################################################################################

    PrivateHostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: "internal"
            HostedZoneConfig:
                Comment: { "Fn::Sub": "Hosted zone created by the '${AWS::StackName}' CloudFormation stack" }
            HostedZoneTags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-private" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "private" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            VPCs:
              - VPCId: { Ref: "Vpc" }
                VPCRegion: { Ref: "AWS::Region" }

    ##########################################################################################################
    ##  EFS
    ##########################################################################################################

    EfsSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group which allows access to the Elastic File System"
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-efs" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    EfsSecurityGroupSelfReference:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: { Ref: "EfsSecurityGroup" }
            IpProtocol: "tcp"
            FromPort: "0"
            ToPort: "65535"
            SourceSecurityGroupId: { Ref: "EfsSecurityGroup" }

    EfsFileSystem:
        Type: "AWS::EFS::FileSystem"
        Properties:
            FileSystemTags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            PerformanceMode: "generalPurpose"

    EfsMountTargetAlpha:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetAlpha" }

    EfsMountTargetBeta:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetBeta" }
        Condition: "MultiAz"

    EfsDnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
          HostedZoneId: { Ref: "PrivateHostedZone" }
          Name: "efs.internal"
          Type: "CNAME"
          TTL: '600'
          ResourceRecords:
            - { "Fn::Sub": "${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com." }

    ##########################################################################################################
    ##  EC2
    ##########################################################################################################

    Ec2InstanceStartupRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ec2.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2" }

    Ec2InstanceStartupProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles: [ { Ref: "Ec2InstanceStartupRole" } ]

    Ec2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group for preprocessing EC2 instances"
            VpcId: { Ref: "Vpc" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: { "Fn::Sub": "10.0.0.0/16" }

            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    Ec2SecurityGroupExternalSsh:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group allowing external SSH access"
            VpcId: { Ref: "Vpc" }

            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    ##########################################################################################################
    ##  BATCH
    ##########################################################################################################

    BatchComputeEnvironment:
        Type: "Custom::Batch_ComputeEnvironment"
        Properties:
            ServiceToken: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:aws-cloudformation-polyfill" }
            ComputeEnvironmentName: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            ComputeResources:
                Ec2KeyPair: { Ref: "Keypair" }
                InstanceRole: { Ref: "Ec2InstanceStartupProfile" }
                InstanceTypes: [ { Ref: "InstanceSize" } ]
                MaxvCpus: 5
                MinvCpus: 1
                SecurityGroupIds:
                  - { Ref: "Ec2SecurityGroup" }
                  - { Ref: "EfsSecurityGroup" }
                Subnets:
                  - { Ref: "PrivateSubnetAlpha" }
                Tags:
                  - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute" } }
                  - { Key: "Management", Value: "managed" }
                  - { Key: "Project", Value: "preprocessing" }
                  - { Key: "Environment", Value: { Ref: "Environment" } }
                Type: "EC2"
            ServiceRole: { "Fn::ImportValue": "BatchServiceRole" }
            State: "ENABLED"
            Type: "MANAGED"

    BatchJobQueue:
        Type: "Custom::Batch_JobQueue"
        Properties:
            ServiceToken: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:aws-cloudformation-polyfill" }
            ComputeEnvironments:
              - ComputeEnvironment: { Ref: "BatchComputeEnvironment" }
                Order: 1
            Name: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            Priority: 1

Outputs:
    EfsId:
        Description: "The id of the Elastic File System"
        Value: { Ref: "EfsFileSystem" }

    JobQueueArn:
        Description: "The ARN of the Job Queue"
        Value: { Ref: "BatchJobQueue" }
