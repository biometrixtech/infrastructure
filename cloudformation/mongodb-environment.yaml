# A template that creates a compute environment
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Batch Compute Environment for the pre-processing pipeline"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the environment"

    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."

    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."

    MongoDbVersion:
        Type: "String"
        AllowedValues: [ "3point4" ]
        Default: "3point4"
        Description: "The version of Mongodb to run"

    Keypair:
        Type: "String"
        Default: ""
        Description: "A SSH keypair to grant access to instances"

    VolumeSize:
        Type: "Number"
        MinValue: 8
        MaxValue: 16384
        Description: "The size of the database volumes"

    VolumeType:
        Type: "String"
        Default: "gp2"
        AllowedValues: [ "gp2", "io1", "st1", "sc1" ]
        Description: "The type of EBS volume to use"

    VolumeProvisionedIops:
        Type: "Number"
        Default: 0
        MaxValue: 20000
        Description: "The number of IOPS to provision"

    AlphaInstanceSize:
        Type: "String"
        Default: "none"
        AllowedValues: [
            "none",
            "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
            "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1.2xlarge", "f1.16xlarge",
            "g2.2xlarge", "g2.8xlarge",
            "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Description: "What type the instance should be"

    BetaInstanceSize:
        Type: "String"
        Default: "none"
        AllowedValues: [
            "none",
            "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
            "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1.2xlarge", "f1.16xlarge",
            "g2.2xlarge", "g2.8xlarge",
            "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Description: "What type the instance should be"

    GammaInstanceSize:
        Type: "String"
        Default: "none"
        AllowedValues: [
            "none",
            "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
            "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1.2xlarge", "f1.16xlarge",
            "g2.2xlarge", "g2.8xlarge",
            "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Description: "What type the instance should be"


    VpcTemplate:
        Type: "String"
        Default: "https://s3.amazonaws.com/biometrix-infrastructure-us-east-1/cloudformation/vpc.yaml"
        Description: "Path to an S3 file containing the CloudFormation template for the VPC Stack"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"
          - Label: { default: "Volumes" }
            Parameters:
              - "VolumeSize"
              - "VolumeType"
              - "VolumeProvisionedIops"
          - Label: { default: "Instances" }
            Parameters:
              - "MongoDbVersion"
              - "Keypair"
              - "AlphaInstanceSize"
              - "BetaInstanceSize"
              - "GammaInstanceSize"
          - Label: { default: "Network" }
            Parameters:
              - "MultiAz"
              - "VpnCidr"
              - "VpcTemplate"

        ParameterLabels:
            Environment: { default: "Environment" }
            VolumeSize: { default: "EBS size" }
            VolumeType: { default: "EBS type" }
            VolumeProvisionedIops: { default: "EBS IOPS" }
            MongoDbVersion: { default: "MongoDb Version" }
            Keypair: { default: "EC2 Keypair" }
            MultiAz: { default: "Multi AZ?" }
            VpnCidr: { default: "VPN CIDR block" }
            AlphaInstanceSize: { default: "Instance size (alpha)" }
            BetaInstanceSize: { default: "Instance size (beta)" }
            GammaInstanceSize: { default: "Instance size (gamma)" }

Mappings:
    RegionAmiMappings:
        us-east-1:      { "3point4": "ami-890e32f2", "bastion": "ami-1d4e7a66" }
        us-west-2:      { "3point4": "ami-00000000", "bastion": "ami-8803e0f0" }

Conditions:
    MultiAzVpc: { "Fn::Or": [
        { "Fn::Equals": [ { Ref: "MultiAz" }, "true" ] },
        { "Fn::Not": [ { "Fn::Equals": [ { Ref: "BetaInstanceSize" }, "none" ] } ] }
    ] }
    AllowSsh: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "Keypair" }, "" ] } ] }
    SpecifyIops: { "Fn::Or": [
        { "Fn::Equals": [ { Ref: "VolumeType" }, "io1" ] },
        { "Fn::Not": [ { "Fn::Equals": [ { Ref: "VolumeProvisionedIops" }, "0" ] } ] }
    ]}
    CreateInstanceAlpha: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "AlphaInstanceSize" }, "none" ] } ] }
    CreateInstanceBeta: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "BetaInstanceSize" }, "none" ] } ] }
    CreateInstanceGamma: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "BetaInstanceSize" }, "none" ] } ] }
    CreateInstanceGammaAsArbiter: { "Fn::And": [ 
        { "Fn::Not": [ { "Fn::Equals": [ { Ref: "BetaInstanceSize" }, "none" ] } ] }, 
        { "Fn::Equals": [ { Ref: "GammaInstanceSize" }, "none" ] }
    ] }

Resources:

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    VpcStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "mongodb"
                Environment: { Ref: "Environment" }
                Service: "mongodb"
                MultiAz: { "Fn::If": [ "MultiAzVpc", "true", "false" ] }
                VpnCidr: { Ref: "VpnCidr" }
                PeeringVpc: ""
                PeeringCidr: ""
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
            TemplateURL: { Ref: "VpcTemplate" }
            TimeoutInMinutes: 10

    ##########################################################################################################
    ## SECURITY
    ##########################################################################################################

    InstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ec2.amazonaws.com" ] }
                    Action: [ "sts:AssumeRole" ]
            Path: "/"
            Policies:
              - PolicyName: "initialise"
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Action:
                          - "autoscaling:DescribeAutoScalingInstances"
                          - "cloudwatch:GetMetricStatistics"
                          - "cloudwatch:ListMetrics"
                          - "cloudwatch:PutMetricData"
                          - "ec2:AttachNetworkInterface"
                          - "ec2:AttachVolume"
                          - "ec2:DescribeInstances"
                          - "ec2:DescribeNetworkInterfaces"
                          - "ec2:DescribeTags"
                          - "ec2:DescribeVolumes"
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:DescribeLogGroups"
                          - "logs:DescribeLogStreams"
                          - "logs:FilterLogEvents"
                          - "logs:GetLogEvents"
                          - "logs:PutLogEvents"
                        Resource: "*"
                        Effect: "Allow"
            RoleName: { "Fn::Sub": "mongodb-${Environment}-mongodb-ec2-${AWS::Region}" }

    InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles: [ { Ref: "InstanceRole" } ]

    InternalSshSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Enable SSH access"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }

    InstanceSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Enable Mongodb access"
            SecurityGroupIngress:
              - IpProtocol: "tcp"
                FromPort: "27017"
                ToPort: "27017"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-mongo" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }

    ##########################################################################################################
    ## EBS AND ENI
    ##########################################################################################################

    InstanceAlphaNetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "ENI for instance Alpha"
            GroupSet: [ { Ref: "InternalSshSecurityGroup" }, { Ref: "InstanceSecurityGroup" }]
            SubnetId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetAlphaId" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceAlpha"

    InstanceAlphaVolume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: { "Fn::GetAtt": [ "VpcStack", "Outputs.AvailabilityZoneAlpha" ] }
            Iops: { "Fn::If": [ "SpecifyIops", { Ref: "VolumeProvisionedIops" }, { Ref: "AWS::NoValue" } ]}
            Size: { Ref: "VolumeSize" }
            VolumeType: { Ref: "VolumeType" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceAlpha"

    InstanceBetaNetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "ENI for instance Beta"
            GroupSet: [ { Ref: "InternalSshSecurityGroup" }, { Ref: "InstanceSecurityGroup" }]
            SubnetId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceBeta"

    InstanceBetaVolume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: { "Fn::GetAtt": [ "VpcStack", "Outputs.AvailabilityZoneBeta" ] }
            Iops: { "Fn::If": [ "SpecifyIops", { Ref: "VolumeProvisionedIops" }, { Ref: "AWS::NoValue" } ]}
            Size: { Ref: "VolumeSize" }
            VolumeType: { Ref: "VolumeType" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceBeta"

    InstanceGammaNetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "ENI for instance Gamma"
            GroupSet: [ { Ref: "InternalSshSecurityGroup" }, { Ref: "InstanceSecurityGroup" }]
            SubnetId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-gamma" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceGamma"

    InstanceGammaVolume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: { "Fn::GetAtt": [ "VpcStack", "Outputs.AvailabilityZoneBeta" ] }
            Iops: { "Fn::If": [ "SpecifyIops", { Ref: "VolumeProvisionedIops" }, { Ref: "AWS::NoValue" } ]}
            Size: { Ref: "VolumeSize" }
            VolumeType: { Ref: "VolumeType" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-gamma" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "mongodb" }
        Condition: "CreateInstanceGamma"

    ##########################################################################################################
    ## AUTOSCALING
    ##########################################################################################################

    LaunchConfiguration:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        DependsOn:
          - "InstanceAlphaNetworkInterface"
        Properties:
            AssociatePublicIpAddress: "false"
            IamInstanceProfile: { Ref: "InstanceProfile" }
            ImageId: { "Fn::FindInMap": [ "RegionAmiMappings", { Ref: "AWS::Region" }, { Ref: "MongoDbVersion" } ] }
            InstanceType: { Ref: "AlphaInstanceSize" }
            SecurityGroups: [ { Ref: "InternalSshSecurityGroup" }, { Ref: "InstanceSecurityGroup" }]
            KeyName: { "Fn::If": [
                "AllowSsh",
                { Ref: "Keypair" },
                { Ref: "AWS::NoValue" }
            ]}
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash

                    # Fail on any errors, including inside piped functions
                    set -euo pipefail


                    # Install the files referenced in the metadata above
                    /opt/aws/bin/cfn-init \
                        --resource LaunchConfiguration \
                        --stack ${AWS::StackName} \
                        --region ${AWS::Region}


                    # Set the hostname
                    INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )
                    echo $INSTANCE_ID > /etc/hostname
                    hostname $INSTANCE_ID


                    # Set the region configuration for CloudWatch Logs Agent
                    echo "region=${AWS::Region}" >> /var/awslogs/etc/aws.conf
                    service awslogs restart


                    # Attach ENI and EBS
                    /opt/biometrix/init_stateful_server.py
                    sleep 30s


                    # Mount the EBS volume as a new filesystem
                    set +e
                    blkid -L mongodatastore
                    FILESYSTEM_EXISTS=$?
                    set -e
                    if [[ $FILESYSTEM_EXISTS -ne 0 ]]; then
                        mkfs -t ext4 -L mongodatastore /dev/xvdb
                    fi
                    mount /dev/xvdb /ext/ebs1
                    echo "LABEL=mongodatastore /ext/ebs1 ext4 nofail 0 0" >> /etc/fstab


                    # If the filesystem hasn't been initialised before, do so; then mount the data directory
                    #if [ ! -d /ext/ebs1/db ]; then
                    #    echo "Initialising EBS volume"
                    #    mkdir /ext/ebs1/db
                    #    cp /jet/prs/mongodb/db/* /ext/ebs1/db -R
                    #fi
                    #echo "Mounting MongoDb data volume"
                    #mount -o bind /ext/ebs1/db /jet/prs/mongodb/db


                    # Signal to the autoscaling group that the instance is configured successfully
                    /opt/aws/bin/cfn-signal \
                        --success true \
                        --stack ${AWS::StackName} \
                        --resource `cat /tmp/aws_asg_name` \
                        --region ${AWS::Region}

    InstanceAlphaAsg:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        DependsOn:
          - "InstanceAlphaNetworkInterface"
          - "InstanceAlphaVolume"
        Properties:
            VPCZoneIdentifier: [ { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetAlphaId" ] } ]
            LaunchConfigurationName: { Ref: "LaunchConfiguration" }
            DesiredCapacity: 1
            MinSize: 0
            MaxSize: 1
            HealthCheckGracePeriod: "30"
            HealthCheckType: "EC2"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-alpha" }, PropagateAtLaunch: "true" }
              - { Key: "Management", Value: "managed", PropagateAtLaunch: "true" }
              - { Key: "Project", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "Environment", Value: { Ref: "Environment" }, PropagateAtLaunch: "true" }
              - { Key: "Service", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "InstanceEniId", Value: { Ref: "InstanceAlphaNetworkInterface" }, PropagateAtLaunch: "true" }
              - { Key: "InstanceVolumeId", Value: { Ref: "InstanceAlphaVolume" }, PropagateAtLaunch: "true" }
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: PT3M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: 1
                MinInstancesInService: 0
                PauseTime: PT3M
                WaitOnResourceSignals: "true"
        Condition: "CreateInstanceAlpha"

    InstanceBetaAsg:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        DependsOn:
          - "InstanceBetaNetworkInterface"
          - "InstanceBetaVolume"
        Properties:
            VPCZoneIdentifier: [ { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] } ]
            LaunchConfigurationName: { Ref: "LaunchConfiguration" }
            DesiredCapacity: 1
            MinSize: 0
            MaxSize: 1
            HealthCheckGracePeriod: "30"
            HealthCheckType: "EC2"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-beta" }, PropagateAtLaunch: "true" }
              - { Key: "Management", Value: "managed", PropagateAtLaunch: "true" }
              - { Key: "Project", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "Environment", Value: { Ref: "Environment" }, PropagateAtLaunch: "true" }
              - { Key: "Service", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "InstanceEniId", Value: { Ref: "InstanceBetaNetworkInterface" }, PropagateAtLaunch: "true" }
              - { Key: "InstanceVolumeId", Value: { Ref: "InstanceBetaVolume" }, PropagateAtLaunch: "true" }
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: PT3M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: 1
                MinInstancesInService: 0
                PauseTime: PT3M
                WaitOnResourceSignals: "true"
        Condition: "CreateInstanceBeta"

    InstanceGammaAsg:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        DependsOn:
          - "InstanceGammaNetworkInterface"
          - "InstanceGammaVolume"
        Properties:
            VPCZoneIdentifier: [ { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetBetaId" ] } ]
            LaunchConfigurationName: { Ref: "LaunchConfiguration" }
            DesiredCapacity: 1
            MinSize: 0
            MaxSize: 1
            HealthCheckGracePeriod: "30"
            HealthCheckType: "EC2"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-mongodb-gamma" }, PropagateAtLaunch: "true" }
              - { Key: "Management", Value: "managed", PropagateAtLaunch: "true" }
              - { Key: "Project", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "Environment", Value: { Ref: "Environment" }, PropagateAtLaunch: "true" }
              - { Key: "Service", Value: "mongodb", PropagateAtLaunch: "true" }
              - { Key: "InstanceEniId", Value: { Ref: "InstanceGammaNetworkInterface" }, PropagateAtLaunch: "true" }
              - { Key: "InstanceVolumeId", Value: { Ref: "InstanceGammaVolume" }, PropagateAtLaunch: "true" }
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: PT3M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: 1
                MinInstancesInService: 0
                PauseTime: PT3M
                WaitOnResourceSignals: "true"
        Condition: "CreateInstanceGamma"

    ##########################################################################################################
    ##  MONITORING
    ##########################################################################################################

    CloudWatchDashboard:
        Type: "AWS::CloudWatch::Dashboard"
        Properties:
            DashboardName: { "Fn::Sub": "mongodb-${Environment}-${AWS::Region}" }
            DashboardBody: !Sub |
                {
                    "widgets": [
                        {
                            "type": "metric",
                            "x": 0,
                            "y": 0,
                            "width": 12,
                            "height": 6,
                            "properties": {
                                "view": "timeSeries",
                                "stacked": false,
                                "metrics": [
                                    [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${InstanceAlphaAsg}", { "period": 60 } ]
                                ],
                                "region": "${AWS::Region}",
                                "title": "CPU Utilisation",
                                "period": 300,
                                "yAxis": {
                                    "left": {
                                        "min": 0,
                                        "max": 100
                                    }
                                }
                            }
                        },
                        {
                            "type": "metric",
                            "x": 12,
                            "y": 0,
                            "width": 12,
                            "height": 6,
                            "properties": {
                                "view": "timeSeries",
                                "stacked": false,
                                "metrics": [
                                    [ "AWS/EBS", "VolumeReadOps", "VolumeId", "vol-0014428c6755b0cc0" ],
                                    [ ".", "VolumeWriteOps", ".", "." ]
                                ],
                                "region": "${AWS::Region}",
                                "title": "Read/Write IOPS"
                            }
                        },
                        {
                            "type": "metric",
                            "x": 0,
                            "y": 6,
                            "width": 12,
                            "height": 6,
                            "properties": {
                                "view": "timeSeries",
                                "stacked": false,
                                "metrics": [
                                    [ "System/Linux", "MemoryUtilization", "AutoScalingGroupName", "${InstanceAlphaAsg}", { "period": 60 } ]
                                ],
                                "region": "${AWS::Region}",
                                "title": "Memory Utilisation",
                                "period": 300,
                                "yAxis": {
                                    "left": {
                                        "min": 0,
                                        "max": 100
                                    }
                                }
                            }
                        },
                        {
                            "type": "metric",
                            "x": 12,
                            "y": 6,
                            "width": 12,
                            "height": 6,
                            "properties": {
                                "view": "timeSeries",
                                "stacked": false,
                                "metrics": [
                                    [ "AWS/EBS", "BurstBalance", "VolumeId", "${InstanceAlphaVolume}", { "yAxis": "right" } ],
                                    [ ".", "VolumeQueueLength", ".", ".", { "period": 300 } ]
                                ],
                                "region": "${AWS::Region}",
                                "period": 300,
                                "title": "Write Queue Length / Burst Balance",
                                "yAxis": {
                                    "right": {
                                        "min": 0,
                                        "max": 100
                                    }
                                }
                            }
                        },
                        {
                            "type": "metric",
                            "x": 0,
                            "y": 12,
                            "width": 3,
                            "height": 9,
                            "properties": {
                                "metrics": [
                                    [ "System/Linux", "DiskSpaceUtilization", "MountPath", "/ext/ebs1", "AutoScalingGroupName", "${InstanceAlphaAsg}", "Filesystem", "/dev/xvdb" ]
                                ],
                                "period": 60,
                                "stat": "Average",
                                "region": "${AWS::Region}",
                                "title": "Data EBS Utilisation",
                                "yAxis": {
                                    "left": {
                                        "min": 0
                                    }
                                },
                                "view": "singleValue",
                                "stacked": false
                            }
                        },
                        {
                            "type": "metric",
                            "x": 3,
                            "y": 12,
                            "width": 3,
                            "height": 9,
                            "properties": {
                                "metrics": [
                                    [ "System/Linux", "DiskSpaceUtilization", "MountPath", "/", "AutoScalingGroupName", "${InstanceAlphaAsg}", "Filesystem", "/dev/xvda1" ]
                                ],
                                "period": 60,
                                "stat": "Average",
                                "region": "${AWS::Region}",
                                "title": "Root EBS Uutilisation",
                                "yAxis": {
                                    "left": {
                                        "min": 0
                                    }
                                },
                                "view": "singleValue",
                                "stacked": false
                            }
                        }
                    ]
                }

    ##########################################################################################################
    ##  BASTION
    ##########################################################################################################

    ExternalSshSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Enable external SSH access"
            VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
            SecurityGroupIngress:
              - IpProtocol: "tcp"
                FromPort: "22"
                ToPort: "22"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-bastion-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "AllowSsh"

    InternalSshSecurityGroupRule:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            FromPort: "22"
            GroupId: { Ref: "InternalSshSecurityGroup" }
            IpProtocol: "tcp"
            SourceSecurityGroupId: { Ref: "ExternalSshSecurityGroup" }
            ToPort: "22"
        Condition: "AllowSsh"

    BastionInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: { "Fn::FindInMap": [ "RegionAmiMappings", { Ref: "AWS::Region" }, "bastion" ] }
            InstanceInitiatedShutdownBehavior: "stop"
            InstanceType: "t2.nano"
            KeyName: { Ref: "Keypair" }
            SecurityGroupIds: [ { Ref: "ExternalSshSecurityGroup" } ]
            SubnetId: { "Fn::GetAtt": [ "VpcStack", "Outputs.PublicSubnetAlphaId" ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "mongodb-${Environment}-bastion" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "mongodb" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "bastion" }
            UserData: ""
        Condition: "AllowSsh"

    BastionElasticIp:
        Type: "AWS::EC2::EIP"
        Properties:
            InstanceId: { Ref: "BastionInstance" }
            Domain: "vpc"
        Condition: "AllowSsh"
        DependsOn: "VpcStack"

    ##########################################################################################################
    ##  OUTPUT
    ##########################################################################################################

    HostSsmParameter:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: { "Fn::Sub": "mongodb.${Environment}.host" }
            Description: "The IP addresses to use in the host field of a mongodb connection string"
            Type: "String"
            Value: { "Fn::GetAtt": [ "InstanceAlphaNetworkInterface", "PrimaryPrivateIpAddress" ] }

Outputs:
    VpcId:
        Description: "The id of the VPC"
        Value: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
