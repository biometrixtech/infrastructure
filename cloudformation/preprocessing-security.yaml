# A template that creates global infrastructure
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates global infrastructure for the pre-processing pipeline"

Resources:

    ##########################################################################################################
    ##  SERVICE ROLES
    ##########################################################################################################

    BatchServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "batch.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
            RoleName: { "Fn::Sub": "preprocessing-service-batch-${AWS::Region}" }

    CodeBuildServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "codebuild.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: "codebuild"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:

                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "codecommit:GitPull"
                          - "codepipeline:GetPipelineState"
                          - "ecr:BatchCheckLayerAvailability"
                          - "ecr:BatchGetImage"
                          - "ecr:CompleteLayerUpload"
                          - "ecr:GetAuthorizationToken"
                          - "ecr:GetDownloadUrlForLayer"
                          - "ecr:InitiateLayerUpload"
                          - "ecr:PutImage"
                          - "ecr:UploadLayerPart"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "batch:RegisterJobDefinition"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "iam:PassRole"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/preprocessing-*" }
            RoleName: { "Fn::Sub": "preprocessing-service-codebuild-${AWS::Region}" }

    StepFunctionsServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ { "Fn::Sub": "states.${AWS::Region}.amazonaws.com" } ] }
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: "lambda"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - "lambda:InvokeFunction"
                        Resource: "*"
            RoleName: { "Fn::Sub": "preprocessing-service-stepfunctions-${AWS::Region}" }

Outputs:

    CodeBuildServiceRole:
        Description: "Service role for CodeBuild"
        Value: { Ref: "CodeBuildServiceRole" }
        Export:
            Name: "CodeBuildServiceRole"

    BatchServiceRole:
        Description: "Service role for Batch"
        Value: { Ref: "BatchServiceRole" }
        Export:
            Name: "BatchServiceRole"

    StepFunctionsServiceRole:
        Description: "Service role for Step Functions"
        Value: { "Fn::GetAtt": [ "StepFunctionsServiceRole", "Arn" ] }
        Export:
            Name: "StepFunctionsServiceRole"
