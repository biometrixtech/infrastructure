# A template that creates global infrastructure
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates global infrastructure for the pre-processing pipeline"

Resources:

    ##########################################################################################################
    ##  S3
    ##########################################################################################################

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
            Tags:
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: "infra" }
        # Don't delete this if we accidentally delete the stack (which would fail anyway unless the bucket is empty)
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ##  LAMBDAS
    ##########################################################################################################

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "ec2:CreateTags"
                          - "ec2:Describe*"
                          - "rds:Describe*"
                          - "rds:ListTagsForResource"
                          - "rds:AddTagsToResource"
                        Effect: "Allow"
                        Resource: "*"

            RoleName: { "Fn::Sub": "infrastructure-lambda-${AWS::Region}" }

    LambdaSynchroniseEc2Tags:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    # A lambda function that will copy EC2 tags to all related Volumes and Network Interfaces.
                    # Based on http://mlapida.com/thoughts/tagging-and-snapshotting-with-lambda
                    # Copyright Mike Lapidakis, Stephen Poole
                    import boto3, os

                    def handler(_, __):
                        handle_vpc()
                        handle_ec2()
                        handle_rds()

                    def handle_rds():
                        rds_client = boto3.client('rds', region_name=os.environ['AWS_REGION'])
                        instance_names = [i['DBInstanceIdentifier'] for i in rds_client.describe_db_instances()['DBInstances']]
                        for db_name in instance_names:
                            print('RDS instance {}'.format(db_name))
                            db_arn = 'arn:aws:rds:{}:{}:db:{}'.format(os.environ['AWS_REGION'], '887689817172', db_name)
                            tags = tag_cleanup(rds_client.list_tags_for_resource(ResourceName=db_arn)['TagList'])
                            for snapshot in rds_client.describe_db_snapshots(DBInstanceIdentifier=db_name)['DBSnapshots']:
                                print('\t' + snapshot['DBSnapshotIdentifier'])
                                rds_client.add_tags_to_resource(ResourceName=snapshot['DBSnapshotArn'], Tags=tags)

                    def handle_ec2():
                        ec2_resource = boto3.resource('ec2', region_name=os.environ['AWS_REGION'])
                        for instance in ec2_resource.instances.all():
                            print('EC2 Instance {}'.format(instance.id))
                            for volume in instance.volumes.all():
                                print('\t' + volume.id)
                                volume.create_tags(Tags=tag_cleanup(instance.tags, '{} (' + volume.attachments[0]['Device'] + ')'))
                            for eni in instance.network_interfaces:
                                print('\t' + eni.id)
                                eni.create_tags(Tags=tag_cleanup(instance.tags, "{} (eth" + str(eni.attachment['DeviceIndex']) + ')'))

                        for volume in ec2_resource.volumes.all():
                            print('EBS Volume {}'.format(volume.id))
                            for snapshot in volume.snapshots.all():
                                print('\tSnapshot {}'.format(snapshot.id))
                                snapshot.create_tags(Tags=tag_cleanup(volume.tags, '{} (' + volume.id + ')'))

                    def handle_vpc():
                        ec2_client = boto3.client('ec2', region_name=os.environ['AWS_REGION'])
                        for nat_gateway in ec2_client.describe_nat_gateways()['NatGateways']:
                            print('NAT Gateway {}'.format(nat_gateway['NatGatewayId']))
                            for gateway_address in nat_gateway['NatGatewayAddresses']:
                                print('\t' + gateway_address['NetworkInterfaceId'])
                                ec2_client.create_tags(Resources=[gateway_address['NetworkInterfaceId']], Tags=tag_cleanup(nat_gateway['Tags'], '{}'))
                                for eip in ec2_client.describe_addresses(AllocationIds=[gateway_address['AllocationId']])['Addresses']:
                                    print('\t\t' + eip['AllocationId'])
                                    ec2_client.create_tags(Resources=[eip['AllocationId']], Tags=tag_cleanup(nat_gateway['Tags'], '{}'))


                    def tag_cleanup(tags, name_format=None):
                        temp_tags = []
                        for t in tags:
                            if t['Key'] == 'Name' and name_format is not None:
                                temp_tags.append({'Key': 'Name', 'Value': name_format.format(t['Value'])})
                            elif t['Key'] in os.environ['TAGS_TO_COPY'].split(','):
                                temp_tags.append(t)
                        print('\t\t\t{' + ','.join(['{}={}'.format(t['Key'], t['Value']) for t in temp_tags]))
                        return temp_tags


            Environment:
                Variables:
                    TAGS_TO_COPY: "Project,Environment,Service,Management"
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "60"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "infrastructure-synchroniseec2tags" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-synchroniseec2tags" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: "infrastructure" }

    LambdaSynchroniseEc2TagsSchedule:
        Type: "AWS::Events::Rule"
        Properties:
            ScheduleExpression: "rate(1 day)"
            Targets:
              - Id: 'scheduler'
                Arn: { "Fn::GetAtt": [ "LambdaSynchroniseEc2Tags", "Arn" ] }

    LambdaSynchroniseEc2TagsInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: { "Fn::GetAtt": [ "LambdaSynchroniseEc2Tags", "Arn" ] }
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "LambdaSynchroniseEc2TagsSchedule", "Arn" ] }

    ##########################################################################################################
    ##  ROUTE53
    ##########################################################################################################

    PublicHostedZoneBiometrixtech:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: "biometrixtech.com"
            HostedZoneConfig:
                Comment: { "Fn::Sub": "Hosted zone created by the '${AWS::StackName}' CloudFormation stack" }
            HostedZoneTags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-infra-biometrixtech" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: "infra" }
              - { Key: "Service", Value: "dns" }

    PublicHostedZoneBiometrixtechMailRecords:
        Type: "AWS::Route53::RecordSetGroup"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZoneBiometrixtech" }
            RecordSets:
              - Name: "biometrixtech.com."
                Type: "TXT"
                TTL: "900"
                ResourceRecords:
                  - '"v=spf1 include:_spf.google.com ~all"'
                  - '"v=spf1 include:mailgun.org ~all"'
                  - '"google-site-verification=3fVpiNbOVmAcItidj9UEWTGkhkSuzX2pXCD63S2lR8E"'

              - Name: "krs._domainkey.biometrixtech.com."
                Type: "TXT"
                TTL: "900"
                ResourceRecords: [ '"k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDINNPEF3fd8LGVNVWbk/Pdqo1egX6RaABspCR4R8jPNYBi4CzO9F+kGMHuEc2bry6QDfhp9ybIIaYuWW5BMg/s92bngvJoXhSvEQBVtabiJl3E0+EigKAWNnJk5w4vWA7AXpdtZ62dGSNmrUJgGtf4Ko2XFcTAuZlxS8YnfLsVuQIDAQAB"' ]

              - Name: "biometrixtech.com."
                Type: "MX"
                TTL: "600"
                ResourceRecords:
                  - "10	ASPMX.L.GOOGLE.COM"
                  - "20	ALT1.ASPMX.L.GOOGLE.COM"
                  - "30	ALT2.ASPMX.L.GOOGLE.COM"
                  - "40	ASPMX2.GOOGLEMAIL.COM"
                  - "50	ASPMX3.GOOGLEMAIL.COM"

    PublicHostedZoneBiometrixtechLegacyRecords:
        Type: "AWS::Route53::RecordSetGroup"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZoneBiometrixtech" }
            RecordSets:
              - Name: "biometrixtech.com."
                Type: "A"
                TTL: "900"
                ResourceRecords: [ '184.168.221.25' ]

              - Name: "_domainconnect.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ '_domainconnect.gd.domaincontrol.com' ]

              - Name: "calendar.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "dashboard.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-1105185689.us-west-2.elb.amazonaws.com' ]

              - Name: "dashboard-dev.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ec2-52-33-19-201.us-west-2.compute.amazonaws.com' ]

              - Name: "dashboard-test.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ec2-52-43-117-116.us-west-2.compute.amazonaws.com' ]

              - Name: "dashboard-v2.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-v2-alb-472858714.us-west-2.elb.amazonaws.com' ]

              - Name: "drive.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "email.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'mailgun.org' ]

              - Name: "firmware.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ddmx9hpf183zt.cloudfront.net' ]

              - Name: "mail.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "rails-api.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-1105185689.us-west-2.elb.amazonaws.com' ]

              - Name: "rails-api-v2.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-v2-alb-472858714.us-west-2.elb.amazonaws.com' ]

              - Name: "sites.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "sysops.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "wiki.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'ghs.googlehosted.com' ]

              - Name: "www.biometrixtech.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'biometrixtech.relaxedandalive.com' ]

    PublicHostedZoneFathomai:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: "fathomai.com"
            HostedZoneConfig:
                Comment: { "Fn::Sub": "Hosted zone created by the '${AWS::StackName}' CloudFormation stack" }
            HostedZoneTags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-infra-biometrixtech" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: "infra" }
              - { Key: "Service", Value: "dns" }

    PublicHostedZoneFathomaiMailRecords:
        Type: "AWS::Route53::RecordSetGroup"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZoneFathomai" }
            RecordSets:
              - Name: "fathomai.com."
                Type: "TXT"
                TTL: "900"
                ResourceRecords:
                  - '"google-site-verification=KD6HN5OxzigkdAU7SzsCWqb4yCIhQV2B8u_kkMrNbuM"'
                  - '"google-site-verification=-zj_c1csBSS3C1TM5-VUR2u4ubUuxIY_SbU2uAQ02Ks"'

              - Name: "fathomai.com."
                Type: "MX"
                TTL: "600"
                ResourceRecords:
                  - "10	ASPMX.L.GOOGLE.COM"
                  - "20	ALT1.ASPMX.L.GOOGLE.COM"
                  - "30	ALT2.ASPMX.L.GOOGLE.COM"
                  - "40	ASPMX2.GOOGLEMAIL.COM"
                  - "50	ASPMX3.GOOGLEMAIL.COM"

    PublicHostedZoneFathomaiSesValidationRecords:
        Type: "AWS::Route53::RecordSetGroup"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZoneFathomai" }
            RecordSets:
              - Name: "_amazonses.fathomai.com."
                Type: "TXT"
                TTL: "900"
                ResourceRecords:
                  - '"kNL+FDPbf9rgAubvZP5VTQRKU8kU5VpgPi35BUX8Bag="'

              - Name: "ciowhmo6jdmy3ykvvqbb5wutrnsypev3._domainkey.fathomai.com."
                Type: "CNAME"
                TTL: "600"
                ResourceRecords:
                  - "ciowhmo6jdmy3ykvvqbb5wutrnsypev3.dkim.amazonses.com"

              - Name: "rshluuewhtdryv7hjcilv2j2bg46gs6u._domainkey.fathomai.com."
                Type: "CNAME"
                TTL: "600"
                ResourceRecords:
                  - "rshluuewhtdryv7hjcilv2j2bg46gs6u.dkim.amazonses.com"

              - Name: "olwredy5xne7d4gwqa27oqstemw7lqdt._domainkey.fathomai.com."
                Type: "CNAME"
                TTL: "600"
                ResourceRecords:
                  - "olwredy5xne7d4gwqa27oqstemw7lqdt.dkim.amazonses.com"

    PublicHostedZoneFathomaiLegacyRecords:
        Type: "AWS::Route53::RecordSetGroup"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZoneFathomai" }
            RecordSets:
              - Name: "fathomai.com."
                Type: "A"
                AliasTarget:
                    HostedZoneId: 'Z1H1FL5HABSF5'
                    DNSName: "wordpress-prod-1136385471.us-west-2.elb.amazonaws.com"

              - Name: "_domainconnect.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ '_domainconnect.gd.domaincontrol.com' ]

              - Name: "beta.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-beta-demo-1408190084.us-west-2.elb.amazonaws.com' ]

              - Name: "dashboard.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-v2-prod-1981511554.us-west-2.elb.amazonaws.com' ]

              - Name: "email.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'email.secureserver.net' ]

              - Name: "ftp.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'fathomai.com' ]

              - Name: "go.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rebrandlydomain.com' ]

              - Name: "rails-api.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'rails-app-v2-prod-1981511554.us-west-2.elb.amazonaws.com' ]

              - Name: "sub.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'fathomai.com' ]

              - Name: "time.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ '35.163.220.1' ]

              - Name: "www.fathomai.com."
                Type: "CNAME"
                TTL: "900"
                ResourceRecords: [ 'wordpress-prod-1136385471.us-west-2.elb.amazonaws.com' ]

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    InfrastructureBucketName:
        Description: "The name of the infrastructure S3 bucket"
        Value: { Ref: "S3Bucket" }
        Export:
            Name: "InfrastructureBucketName"

    BiometrixHostedZoneId:
        Description: "The ID of the biometrixtech.com public Hosted Zone"
        Value: { Ref: "PublicHostedZoneBiometrixtech" }
        Export:
            Name: "BiometrixHostedZoneId"

    BiometrixHostedZoneNameservers:
        Description: "The nameservers that the biometrixtech.com domain should be delegated to"
        Value: { "Fn::Join": [ ", ", { "Fn::GetAtt": [ "PublicHostedZoneBiometrixtech", "NameServers" ] } ] }

    FathomaiHostedZoneId:
        Description: "The ID of the fathomai.com public Hosted Zone"
        Value: { Ref: "PublicHostedZoneFathomai" }
        Export:
            Name: "FathomaiHostedZoneId"

    FathomaiHostedZoneNameservers:
        Description: "The nameservers that the fathomai.com domain should be delegated to"
        Value: { "Fn::Join": [ ", ", { "Fn::GetAtt": [ "PublicHostedZoneFathomai", "NameServers" ] } ] }
