# A template that creates a VPC and networking
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a VPC and networking resources"

Parameters:

    Project:
        Type: "String"
        Description: "The name of the Project"

    Environment:
        Type: "String"
        Description: "The name of the environment"

    Service:
        Type: "String"
        Description: "The name of the service"

    SubnetConfiguration:
        Type: "String"
        AllowedValues: [ "Public A/B, Private A/B", "Public A/B", "Public A" ]
        Description: "The configuration of public/private subnets"

    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."

    PeeringId:
        Type: "String"
        Default: ""
        AllowedPattern: "^(vpc|pcx)-[a-z0-9]+|$"
        Description: "VPC ID to create a new peering connection to, or Peering Connection ID to add routes to an existing connection"

    PeeringCidr:
        Type: "String"
        Description: "Peering VPC CIDR range"
        Default: ""
        MaxLength: "18"
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Project"
              - "Environment"
              - "Service"
          - Label: { default: "Configuration" }
            Parameters:
              - "SubnetConfiguration"
              - "VpnCidr"
              - "PeeringId"
              - "PeeringCidr"

        ParameterLabels:
            Project: { default: "Project" }
            Environment: { default: "Environment" }
            Service: { default: "Service" }
            SubnetConfiguration: { default: "Subnet configuration" }
            VpnCidr: { default: "VPN CIDR block" }
            PeeringId: { default: "Peering VPN ID" }
            PeeringCidr: { default: "Peering VPN CIDR" }

Conditions:
    CreatePublicBeta: { "Fn::Or": [
        { "Fn::Equals": [ { Ref: "SubnetConfiguration" }, "Public A/B, Private A/B" ] },
        { "Fn::Equals": [ { Ref: "SubnetConfiguration" }, "Public A/B" ] }
    ] }
    CreatePrivateAlpha: { "Fn::Equals": [ { Ref: "SubnetConfiguration" }, "Public A/B, Private A/B" ] }
    CreatePrivateBeta: { "Fn::Equals": [ { Ref: "SubnetConfiguration" }, "Public A/B, Private A/B" ] }
    CreatePeering: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PeeringId" }, "" ] } ] }
    CreatePublicBetaAndCreatePeering: { "Fn::And": [
        { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PeeringId" }, "" ] } ] },
        { "Condition": "CreatePublicBeta" }
    ] }
    CreatePrivateBetaAndCreatePeering: { "Fn::And": [
        { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PeeringId" }, "" ] } ] },
        { "Condition": "CreatePrivateBeta" }
    ] }
    CreatePeeringConnection: { "Fn::Equals": [
        "vpc",
        { "Fn::Select": [ 0, { "Fn::Split": [ "-", { Ref: "PeeringId" } ] } ] }
    ] }

Resources:
    Vpc:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: { "Fn::Sub": "10.${VpnCidr}.0.0/16" }
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            InstanceTenancy: "default"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties :
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    InternetGatewayVpcAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            VpcId: { Ref: "Vpc" }
            InternetGatewayId: { Ref: "InternetGateway" }

    PeeringConnection:
        Type: "AWS::EC2::VPCPeeringConnection"
        Properties:
            PeerVpcId: { Ref: "PeeringId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-peering" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
            VpcId: { Ref: "Vpc" }
        Condition: "CreatePeeringConnection"

    ##########################################################################################################
    ##  PUBLIC AZ ALPHA
    ##########################################################################################################

    PublicSubnetAlpha:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.${VpnCidr}.0.0/24" }
            MapPublicIpOnLaunch: true
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "a" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-public-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    PublicRouteTableAlpha:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-public-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    PublicSubnetAlphaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PublicSubnetAlpha" }
            RouteTableId: { Ref: "PublicRouteTableAlpha" }

    PublicRouteAlpha:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableAlpha" }
            GatewayId: { Ref: "InternetGateway" }
            DestinationCidrBlock: "0.0.0.0/0"
        DependsOn: "InternetGatewayVpcAttachment"

    PublicAlphaPeeringRoute:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableAlpha" }
            VpcPeeringConnectionId: { "Fn::If": [
                "CreatePeeringConnection",
                { Ref: "PeeringConnection" },
                { Ref: "PeeringId" } ] }
            DestinationCidrBlock: { Ref: "PeeringCidr" }
        Condition: "CreatePeering"
        DependsOn: "InternetGatewayVpcAttachment"

    NatGatewayEipAlpha:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    NatGatewayAlpha:
        DependsOn: "InternetGatewayVpcAttachment"
        Type: "AWS::EC2::NatGateway"
        Properties:
            AllocationId: { "Fn::GetAtt" : [ "NatGatewayEipAlpha", "AllocationId" ] }
            SubnetId: { Ref: "PublicSubnetAlpha" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    ##########################################################################################################
    ##  PUBLIC AZ BETA
    ##########################################################################################################

    PublicSubnetBeta:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock:  { "Fn::Sub": "10.${VpnCidr}.100.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "b" ] ] }
            MapPublicIpOnLaunch: true
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-public-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
        Condition: "CreatePublicBeta"

    PublicRouteTableBeta:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-public-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
        Condition: "CreatePublicBeta"

    PublicSubnetBetaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PublicSubnetBeta" }
            RouteTableId: { Ref: "PublicRouteTableBeta" }
        Condition: "CreatePublicBeta"

    PublicRouteBeta:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableBeta" }
            GatewayId: { Ref: "InternetGateway" }
            DestinationCidrBlock: "0.0.0.0/0"
        Condition: "CreatePublicBeta"
        DependsOn: "InternetGatewayVpcAttachment"

    PublicBetaPeeringRoute:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PublicRouteTableBeta" }
            VpcPeeringConnectionId: { "Fn::If": [
                "CreatePeeringConnection",
                { Ref: "PeeringConnection" },
                { Ref: "PeeringId" } ] }
            DestinationCidrBlock: { Ref: "PeeringCidr" }
        Condition: "CreatePublicBetaAndCreatePeering"
        DependsOn: "InternetGatewayVpcAttachment"

    ##########################################################################################################
    ##  PRIVATE AZ ALPHA
    ##########################################################################################################

    PrivateSubnetAlpha:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.${VpnCidr}.1.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "a" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-private-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    PrivateRouteTableAlpha:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-private-alpha" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    PrivateSubnetAlphaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PrivateSubnetAlpha" }
            RouteTableId: { Ref: "PrivateRouteTableAlpha" }

    PrivateRouteAlpha:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableAlpha" }
            NatGatewayId: { Ref: "NatGatewayAlpha" }
            DestinationCidrBlock: "0.0.0.0/0"
        DependsOn: "InternetGatewayVpcAttachment"

    PrivateAlphaPeeringRoute:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableAlpha" }
            VpcPeeringConnectionId: { "Fn::If": [
                "CreatePeeringConnection",
                { Ref: "PeeringConnection" },
                { Ref: "PeeringId" } ] }
            DestinationCidrBlock: { Ref: "PeeringCidr" }
        Condition: "CreatePeering"
        DependsOn: "InternetGatewayVpcAttachment"

    ##########################################################################################################
    ##  PRIVATE AZ BETA
    ##########################################################################################################

    PrivateSubnetBeta:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: { Ref: "Vpc" }
            CidrBlock: { "Fn::Sub": "10.${VpnCidr}.101.0/24" }
            AvailabilityZone: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "b" ] ] }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-private-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
        Condition: "CreatePrivateBeta"

    PrivateRouteTableBeta:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: { Ref: "Vpc" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-private-beta" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
        Condition: "CreatePrivateBeta"

    PrivateSubnetBetaRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: { Ref: "PrivateSubnetBeta" }
            RouteTableId: { Ref: "PrivateRouteTableBeta" }
        Condition: "CreatePrivateBeta"

    PrivateRouteBeta:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableBeta" }
            NatGatewayId: { Ref: "NatGatewayAlpha" }
            DestinationCidrBlock: "0.0.0.0/0"
        Condition: "CreatePrivateBeta"
        DependsOn: "InternetGatewayVpcAttachment"

    PrivateBetaPeeringRoute:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: { Ref: "PrivateRouteTableBeta" }
            VpcPeeringConnectionId: { "Fn::If": [
                "CreatePeeringConnection",
                { Ref: "PeeringConnection" },
                { Ref: "PeeringId" } ] }
            DestinationCidrBlock: { Ref: "PeeringCidr" }
        Condition: "CreatePrivateBetaAndCreatePeering"
        DependsOn: "InternetGatewayVpcAttachment"

    ##########################################################################################################
    ##  ENDPOINTS
    ##########################################################################################################

    # An S3 endpoint provides a direct connection from the EC2 instances to S3; providing lower latency
    # and without incurring network bandwidth charges.  Note that currently they don't support commands like
    # sync between S3 buckets in different regions :(
    S3Endpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            RouteTableIds:
               - { Ref: "PublicRouteTableAlpha" }
               - { "Fn::If": [ "CreatePublicBeta", { Ref: "PublicRouteTableBeta" }, { Ref: "AWS::NoValue" } ] }
               - { "Fn::If": [ "CreatePrivateAlpha", { Ref: "PrivateRouteTableAlpha" }, { Ref: "AWS::NoValue" } ] }
               - { "Fn::If": [ "CreatePrivateBeta", { Ref: "PrivateRouteTableBeta" }, { Ref: "AWS::NoValue" } ] }
            ServiceName: { "Fn::Sub": "com.amazonaws.${AWS::Region}.s3" }
            VpcId: { Ref: "Vpc" }

    ##########################################################################################################
    ##  ROUTE53
    ##########################################################################################################

    PrivateHostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: "internal"
            HostedZoneConfig:
                Comment: { "Fn::Sub": "Hosted zone created by the '${AWS::StackName}' CloudFormation stack" }
            HostedZoneTags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-private" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
            VPCs:
              - VPCId: { Ref: "Vpc" }
                VPCRegion: { Ref: "AWS::Region" }

Outputs:
    VpcId:
        Description: "The id of the VPC"
        Value: { Ref: "Vpc" }

    AvailabilityZoneAlpha:
        Description: "The availability zone used for AZ alpha"
        Value: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "a" ] ] }

    AvailabilityZoneBeta:
        Description: "The availability zone used for AZ beta"
        Value: { "Fn::Join": [ "", [ { Ref: "AWS::Region" }, "b" ] ] }

    PrivateSubnetAlphaId:
        Description: "The id of private subnet alpha"
        Value: { "Fn::If": [ "CreatePrivateAlpha", { Ref: "PrivateSubnetAlpha" }, "" ] }

    PrivateSubnetBetaId:
        Description: "The id of private subnet beta"
        Value: { "Fn::If": [ "CreatePrivateBeta", { Ref: "PrivateSubnetBeta" }, "" ]}

    PrivateSubnetIds:
        Description: "The ids of the private subnets"
        Value: { "Fn::If": [ "CreatePrivateBeta",
            { "Fn::Sub": "${PrivateSubnetAlpha},${PrivateSubnetBeta}" },
            { "Fn::If": [ "CreatePrivateAlpha", { Ref: "PrivateSubnetAlpha" }, "" ] }
        ]}

    PublicSubnetAlphaId:
        Description: "The id of public subnet alpha"
        Value: { Ref: "PublicSubnetAlpha" }

    PublicSubnetBetaId:
        Description: "The id of public subnet beta"
        Value: { "Fn::If": [ "CreatePublicBeta", { Ref: "PublicSubnetBeta" }, "" ]}

    PublicSubnetIds:
        Description: "The ids of the private subnets"
        Value: { "Fn::If": [ "CreatePublicBeta",
            { "Fn::Sub": "${PublicSubnetAlpha},${PublicSubnetBeta}" },
            { Ref: "PrivateSubnetAlpha" }
        ]}

    PrivateHostedZoneId:
        Description: "The id of private hosted zone"
        Value: { Ref: "PrivateHostedZone" }
