# A template that creates an ECS cluster hosted on AWS Fargate
#
# Copyright 2018 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an ECS cluster hosted on AWS Fargate"

Parameters:

    Project:
        Description: "The name of the project"
        Type: "String"
    Environment:
        Description: "The name of the environment"
        Type: "String"
    Service:
        Description: "The name of the service"
        Type: "String"

    # Passed nested parameters
    Vpc:
        Description: "The ID of the VPC"
        Type: "AWS::EC2::VPC::Id"
    PublicSubnets:
        Description: "The IDs of the subnets to launch containers in"
        Type: "List<AWS::EC2::Subnet::Id>"


Resources:

    ##########################################################################################################
    ##  SECURITY
    ##########################################################################################################

    EcsServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service: [ "ecs.amazonaws.com" ]
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
            RoleName: { "Fn::Sub": "${Project}-${Environment}-${Service}-ecsservicerole-${AWS::Region}" }

    EcsContainerRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ecs-tasks.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
            RoleName: { "Fn::Sub": "${Project}-${Environment}-${Service}-ecscontainer-${AWS::Region}" }

    EcsSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: { "Fn::Sub": "${Project}-${Environment}-${Service}-fargate" }
            GroupDescription: "Security group for Fargate containers"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-fargate" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
            VpcId: { Ref: "Vpc" }

    EcsSecurityGroupIngressFromPublicALB:
        Type: 'AWS::EC2::SecurityGroupIngress'
        Properties:
            Description: 'Ingress from the ALB'
            GroupId: { Ref: 'EcsSecurityGroup' }
            IpProtocol: -1
            SourceSecurityGroupId: { Ref: 'AlbSecurityGroup' }

    EcsSecurityGroupIngressFromSelf:
        Type: 'AWS::EC2::SecurityGroupIngress'
        Properties:
            Description: 'Ingress from other containers in the same security group'
            GroupId: { Ref: 'EcsSecurityGroup' }
            IpProtocol: -1
            SourceSecurityGroupId: { Ref: 'EcsSecurityGroup' }


    ##########################################################################################################
    ##  ALB
    ##########################################################################################################

    AlbSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: { "Fn::Sub": "${Project}-${Environment}-${Service}-alb" }
            GroupDescription: 'Access to the public facing load balancer'
            SecurityGroupIngress:
              # Allow access to ALB from anywhere on the internet
              - CidrIp: '0.0.0.0/0'
                IpProtocol: -1
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-alb" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }
            VpcId: { Ref: 'Vpc' }

    Alb:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            LoadBalancerAttributes:
              - Key: 'idle_timeout.timeout_seconds'
                Value: '30'
            Name: { "Fn::Sub": "${Project}-${Environment}-${Service}-alb" }
            Scheme: 'internet-facing'
            SecurityGroups: [ { Ref: 'AlbSecurityGroup' } ]
            Subnets: { Ref: 'PublicSubnets' }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "${Project}-${Environment}-${Service}-alb" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: { Ref: "Project" } }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: { Ref: "Service" } }

    ##########################################################################################################
    ##  ECS
    ##########################################################################################################

    EcsCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: { "Fn::Sub": "${Project}-${Environment}-${Service}" }
