# A template that creates top-level infrastructure for a Fathom AI environment
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates top-level infrastructure for a Fathom AI environment"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the environment"

    # To use an ACM certificate in API Gateway, it must have been created in North Virginia (boo hiss).
    # We can't create cross-region resources in a stack, but we want to export the certificate id in
    # *this* region.  So create the certificate manually in us-east-1, then pass its id as a parameter
    # here, and it'll be passed through and exported.
    # TODO what happens if this stack is created *in* us-east-1?!
    FathomaiSslCertificateArnVirginia:
        Description: "The ACM Certificate ID for *.<env>.fathomai.com wildcard cert in us-east-1"
        Type: "String"
        Default: ""
        AllowedPattern: "^$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"

    # CloudFormation (and indeed the AWS CLI) currently doesn't support retrieving the required DNS validation
    # CNAME record, which is required to support renewing the certificate
    # TODO make a custom resource to extract this information as and when it's supported by boto3
    FathomaiSslCertificateVirginiaValidation:
        Description: "The CNAME record required to validate the *.<env>.fathomai.com wildcard cert in us-east-1.  Supply just the first part of each domain, separated by a pipe"
        Type: "String"
        Default: ""

    SslCertificateValidated:
        Description: "Whether the SSL certificate has been validated"
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Default: "false"

    QuerypostgresVpcId:
        Type: "String"
        Default: ""
        Description: "The ID of the VPC to launch the querypostgres lambda functions in"

    QuerypostgresSubnetIds:
        Type: "CommaDelimitedList"
        Default: ""
        Description: "The IDs of the subnets to launch the querypostgres lambda functions in"

    HardwareServiceVersion:
        Type: "String"
        Description: "The git commit hash of the Hardware service to deploy"
        AllowedPattern: "^[a-f0-9]{40}$|^$"
        ConstraintDescription: "Must be a 40-hex-digit Git commit hash"

    PlansServiceVersion:
        Type: "String"
        Description: "The git commit hash of the Plans service to deploy"
        AllowedPattern: "^[a-f0-9]{40}$|^$"
        ConstraintDescription: "Must be a 40-hex-digit Git commit hash"
    PlansPeeringId:
        Type: "String"
        Default: ""
        Description: "The ID of the VPC to peer to for MongoDB connections"
    PlansPeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

    PreprocessingServiceVersion:
        Type: "String"
        Description: "The git commit hash of the Preprocessing service to deploy"
        AllowedPattern: "^[a-f0-9]{40}$|^$"
        ConstraintDescription: "Must be a 40-hex-digit Git commit hash"
    PreprocessingAutoscalingSchedule:
        Type: "String"
        Default: ""
        Description: "A definition JSON string for autoscaling the compute cluster"
    PreprocessingDynamodbWriteCapacity:
        Default: 1
        Description: "The write capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"
    PreprocessingPeeringId:
        Type: "String"
        Default: ""
        Description: "The ID of the VPC to peer to for MongoDB connections"
    PreprocessingPeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

    StatsapiServiceVersion:
        Type: "String"
        Description: "The git commit hash of the Statsapi service to deploy"
        AllowedPattern: "^[a-f0-9]{40}$|^$"
        ConstraintDescription: "Must be a 40-hex-digit Git commit hash"
    StatsapiMongoDbPeeringVpc:
        Type: "String"
        Default: ""
        Description: "The ID of the VPC to peer to for MongoDB connections"
    StatsapiMongoDbPeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
    StatsapiMongodbHostSession:
        Description: "The MongoDB host for session"
        Type: "String"
        Default: ""
    StatsapiMongodbHostTwomin:
        Description: "The MongoDB host for twomin"
        Type: "String"
        Default: ""
    StatsapiMongodbUser:
        Description: "The MongoDB user"
        Type: "String"
        Default: ""
    StatsapiMongodbPassword:
        Description: "The MongoDB password"
        Type: "String"
        Default: ""
        NoEcho: true
    StatsapiMongodbReplicasetSession:
        Description: "The MongoDB replica set for session"
        Type: "String"
        Default: "---"
    StatsapiMongodbReplicasetTwomin:
        Description: "The MongoDB replica set for twomin"
        Type: "String"
        Default: "---"
    StatsapiMongodbCollectionSuffix:
        Description: "The suffix for mongodb collections"
        Type: "String"
        Default: ""

    UsersServiceVersion:
        Type: "String"
        Description: "The git commit hash of the Users service to deploy"
        AllowedPattern: "^[a-f0-9]{40}$|^$"
        ConstraintDescription: "Must be a 40-hex-digit Git commit hash"
    UsersPeeringId:
        Type: "String"
        Default: ""
        Description: "The ID of the VPC to peer to for MongoDB connections"
    UsersPeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
    UsersDynamodbReadCapacity:
        Default: 1
        Description: "The read capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"
    UsersDynamodbWriteCapacity:
        Default: 1
        Description: "The write capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"
    UsersSnsApplicationArnIos:
        Default: ""
        Description: "The ARN of the SNS application for mobile pushes via APN"
        Type: "String"
    UsersSnsApplicationArnAndroid:
        Default: ""
        Description: "The ARN of the SNS application for mobile pushes via GCM"
        Type: "String"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "884e29d8a90da73844b6702bcf8b5a60e87ecf58" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Environment"

          - Label: { default: "ACM" }
            Parameters:
              - "FathomaiSslCertificateArnVirginia"
              - "FathomaiSslCertificateVirginiaValidation"
              - "SslCertificateValidated"

          - Label: { default: "querypostgres" }
            Parameters:
              - "QuerypostgresVpcId"
              - "QuerypostgresSubnetIds"

          - Label: { default: "Hardware" }
            Parameters:
              - "HardwareServiceVersion"

          - Label: { default: "Plans" }
            Parameters:
              - "PlansServiceVersion"
              - "PlansPeeringId"
              - "PlansPeeringCidr"

          - Label: { default: "Preprocessing" }
            Parameters:
              - "PreprocessingServiceVersion"
              - "PreprocessingAutoscalingSchedule"
              - "PreprocessingDynamodbWriteCapacity"
              - "PreprocessingPeeringId"
              - "PreprocessingPeeringCidr"

          - Label: { default: "Stats Api" }
            Parameters:
              - "StatsapiServiceVersion"
              - "StatsapiMongoDbPeeringVpc"
              - "StatsapiMongoDbPeeringCidr"
              - "StatsapiMongodbHostSession"
              - "StatsapiMongodbHostTwomin"
              - "StatsapiMongodbUser"
              - "StatsapiMongodbPassword"
              - "StatsapiMongodbReplicasetSession"
              - "StatsapiMongodbReplicasetTwomin"
              - "StatsapiMongodbCollectionSuffix"

          - Label: { default: "Users" }
            Parameters:
              - "UsersServiceVersion"
              - "UsersPeeringId"
              - "UsersPeeringCidr"
              - "UsersDynamodbReadCapacity"
              - "UsersDynamodbWriteCapacity"
              - "UsersSnsApplicationArnAndroid"
              - "UsersSnsApplicationArnIos"

        ParameterLabels:
            Environment: { default: "Environment" }
            FathomaiSslCertificateArnVirginia: { default: "ACM Certificate ID (us-east-1)" }
            FathomaiSslCertificateVirginiaValidation: { default: "ACM CNAME validation (us-east-1)" }
            SslCertificateValidated: { default: "ACM Certificates validated?" }

            QuerypostgresVpcId: { default: "VPC ID" }
            QuerypostgresSubnetIds: { default: "Subnet IDs" }

            HardwareServiceVersion: { default: "Hardware service version" }

            PlansServiceVersion: { default: "Plans service version" }
            PlansPeeringId: { default: "Peering VPC/PCN ID" }
            PlansPeeringCidr: { default: "Peering CIDR Range" }

            PreprocessingServiceVersion: { default: "Preprocessing service version" }
            PreprocessingAutoscalingSchedule: { default: "Autoscaling schedule" }
            PreprocessingDynamodbWriteCapacity: { default: "DynamoDB WCUs" }
            PreprocessingPeeringId: { default: "Peering VPC/PCN ID" }
            PreprocessingPeeringCidr: { default: "Peering CIDR Range" }

            StatsapiServiceVersion: { default: "Stats API service version" }
            StatsapiMongoDbPeeringVpc: { default: "MongoDB peering VPC ID" }
            StatsapiMongoDbPeeringCidr: { default: "MongoDB peering CIDR" }
            StatsapiMongodbHostSession: { default: "MongoDB host (session)" }
            StatsapiMongodbHostTwomin: { default: "MongoDB host (twomin)" }
            StatsapiMongodbUser: { default: "MongoDB user" }
            StatsapiMongodbPassword: { default: "MongoDB password" }
            StatsapiMongodbReplicasetSession: { default: "MongoDB replicaset (session)" }
            StatsapiMongodbReplicasetTwomin: { default: "MongoDB replicaset (twomin)" }
            StatsapiMongodbCollectionSuffix: { default: "MongoDB collection suffix" }

            UsersServiceVersion: { default: "Users service version" }
            UsersPeeringId: { default: "Peering VPC/PCN ID" }
            UsersPeeringCidr: { default: "Peering CIDR Range" }
            UsersDynamodbReadCapacity: { default: "DynamoDB read capacity" }
            UsersDynamodbWriteCapacity: { default: "DynamoDB write capacity" }
            UsersSnsApplicationArnAndroid: { default: "SNS Application ARN (Android)" }
            UsersSnsApplicationArnIos: { default: "SNS Application ARN (iOS)" }

Conditions:
    CreateFathomaiSslCertificateVirginiaValidation: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "FathomaiSslCertificateVirginiaValidation" }, "" ] } ] }
    CreateApiGateway: { "Fn::Equals": [ { Ref: "SslCertificateValidated" }, "true" ] }
    QuerypostgresCreateVpc: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "QuerypostgresVpcId" }, "" ] } ] }
    CreateHardwareService: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "HardwareServiceVersion" }, "" ] } ] }
    CreatePlansService: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PlansServiceVersion" }, "" ] } ] }
    CreatePreprocessingService: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PreprocessingServiceVersion" }, "" ] } ] }
    CreateStatsapiService: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "StatsapiServiceVersion" }, "" ] } ] }
    CreateUsersService: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "UsersServiceVersion" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  ROUTE53
    ##########################################################################################################

    PublicHostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: { "Fn::Sub": "${Environment}.fathomai.com" }
            HostedZoneConfig:
                Comment: { "Fn::Sub": "Hosted zone created by the '${AWS::StackName}' CloudFormation stack" }
            HostedZoneTags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-${Environment}-public" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    PublicHostedZoneNameserverDelegation:
        Type: "AWS::Route53::RecordSet"
        Properties:
            HostedZoneId: { "Fn::ImportValue": "FathomaiHostedZoneId" }
            Comment: "Nameserver delegation"
            Name: { "Fn::Sub": "${Environment}.fathomai.com" }
            Type: "NS"
            TTL: "600"
            ResourceRecords: { "Fn::GetAtt": [ "PublicHostedZone", "NameServers" ] }

    FathomaiSslCertificateVirginiaValidationRecords:
        Type: "AWS::Route53::RecordSet"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZone" }
            Comment: "Nameserver delegation"
            Name: { "Fn::Sub": [
                "${FirstPart}.${Environment}.fathomai.com.",
                { FirstPart: { "Fn::Select": [ 0, { "Fn::Split": [ "|", { Ref: "FathomaiSslCertificateVirginiaValidation" } ] } ] } }
             ] }
            Type: "CNAME"
            TTL: "600"
            ResourceRecords: [ { "Fn::Sub": [
                "${FirstPart}.acm-validations.aws.",
                { FirstPart: { "Fn::Select": [ 1, { "Fn::Split": [ "|", { Ref: "FathomaiSslCertificateVirginiaValidation" } ] } ] } }
             ] } ]
        Condition: "CreateFathomaiSslCertificateVirginiaValidation"

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    ApiCustomDomainName:
        Type: 'AWS::ApiGateway::DomainName'
        Properties:
            DomainName: { "Fn::Sub": "apis.${Environment}.fathomai.com" }
            CertificateArn: { "Fn::Sub": "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${FathomaiSslCertificateArnVirginia}" }
        Condition: "CreateApiGateway"

    ApisCustomDomainCnameRecords:
        Type: "AWS::Route53::RecordSet"
        Properties:
            HostedZoneId: { Ref: "PublicHostedZone" }
            Comment: "Stats API"
            Name: { "Fn::Sub": "apis.${Environment}.fathomai.com." }
            Type: "CNAME"
            TTL: "600"
            ResourceRecords: [ { "Fn::GetAtt": [ "ApiCustomDomainName", "DistributionDomainName" ] } ]
        Condition: "CreateApiGateway"

    ##########################################################################################################
    ##  QUERYPOSTGRES
    ##########################################################################################################

    QuerypostgresExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action: "ssm:DescribeParameters"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "ssm:GetParameters"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/preprocessing.${Environment}.*" }

                      - Action:
                          - "kms:Decrypt"
                        Effect: "Allow"
                        Resource:
                          - "*" # TODO this should be segregated by environment somehow
            RoleName: { "Fn::Sub": "infrastructure-${Environment}-querypostgres-${AWS::Region}" }

    QuerypostgresVpcSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group which allows access for AWS Lambda"
            GroupName: { "Fn::Sub": "preprocessing-${Environment}-apigateway-execute" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-${Environment}-querypostgres" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "querypostgres" }
            VpcId: { Ref: "QuerypostgresVpcId" }
        Condition: "QuerypostgresCreateVpc"

    QuerypostgresLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/infrastructure/${TemplateVersion}/execute_postgres_query.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
            FunctionName: { "Fn::Sub": "infrastructure-${Environment}-querypostgres" }
            Handler: "execute_postgres_query.handler"
            Role: { "Fn::GetAtt" : [ "QuerypostgresExecutionRole", "Arn" ] }
            Runtime: "python3.6"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-${Environment}-querypostgres" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Environment", Value: "querypostgres" }
            Timeout: "30"
            TracingConfig:
                Mode: "Active"
            VpcConfig: { "Fn::If": [
                "QuerypostgresCreateVpc",
                {
                    SubnetIds: { Ref: "QuerypostgresSubnetIds" },
                    SecurityGroupIds: [ { Ref: "QuerypostgresVpcSecurityGroup" } ]
                },
                { Ref: "AWS::NoValue" }
            ]}

    QuerypostgresExecutionPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Allows entities to query the Postgres databaase"
            ManagedPolicyName: { "Fn::Sub": "infrastructure-${Environment}-querypostgres" }
            Path: "/"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action:
                      - "lambda:InvokeFunction"
                    Effect: "Allow"
                    Resource: { "Fn::GetAtt": [ "QuerypostgresLambda", "Arn" ] }

    ##########################################################################################################
    ##  ALERTS
    ##########################################################################################################

    PlansService:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                VpnCidr: { Ref: 'AWS::NoValue' }
                MongoDbPeeringId: { Ref: "PlansPeeringId" }
                MongoDbPeeringCidr: { Ref: "PlansPeeringCidr" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/plans/${TemplateVersion}/plans-environment.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { Ref: "PlansServiceVersion" }
            } ] }
            TimeoutInMinutes: 30
        Condition: "CreatePlansService"
        DependsOn:
          - "UsersService"

    ##########################################################################################################
    ##  HARDWARE
    ##########################################################################################################

    HardwareService:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "hardware-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "hardware" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/hardware/${TemplateVersion}/hardware-environment.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { Ref: "HardwareServiceVersion" }
            } ] }
            TimeoutInMinutes: 30
        Condition: "CreateHardwareService"
        DependsOn:
          - "UsersService"

    ##########################################################################################################
    ##  PREPROCESSING
    ##########################################################################################################

    PreprocessingService:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                CreateVpc: "true"
                CreateCompute: "true"
                CreatePipeline: "false"
                CreateIngest: "false"
                MultiAz: "true"
                VpnCidr: 0
                MongoDbPeeringId: { Ref: "PreprocessingPeeringId" }
                MongoDbPeeringCidr: { Ref: "PreprocessingPeeringCidr" }
                AutoscalingSchedule: { Ref: "PreprocessingAutoscalingSchedule" }
                DynamodbWriteCapacity: { Ref: "PreprocessingDynamodbWriteCapacity" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/preprocessing/${TemplateVersion}/preprocessing-environment.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { Ref: "PreprocessingServiceVersion" }
            } ] }
            TimeoutInMinutes: 30
        Condition: "CreatePreprocessingService"
        DependsOn:
          - "UsersService"

    ##########################################################################################################
    ##  STATS API
    ##########################################################################################################

    StatsapiService:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                MongoDbPeeringVpc: { Ref: "StatsapiMongoDbPeeringVpc" }
                MongoDbPeeringCidr: { Ref: "StatsapiMongoDbPeeringCidr" }
                MongodbHostSession: { Ref: "StatsapiMongodbHostSession" }
                MongodbHostTwomin: { Ref: "StatsapiMongodbHostTwomin" }
                MongodbUser: { Ref: "StatsapiMongodbUser" }
                MongodbPassword: { Ref: "StatsapiMongodbPassword" }
                MongodbReplicasetSession: { Ref: "StatsapiMongodbReplicasetSession" }
                MongodbReplicasetTwomin: { Ref: "StatsapiMongodbReplicasetTwomin" }
                MongodbCollectionSuffix: { Ref: "StatsapiMongodbCollectionSuffix" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "statsapi-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "statsapi" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/statsapi/${TemplateVersion}/statsapi-environment.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { Ref: "StatsapiServiceVersion" }
            } ] }
            TimeoutInMinutes: 30
        Condition: "CreateStatsapiService"
        DependsOn:
          - "UsersService"

    ##########################################################################################################
    ##  USERS
    ##########################################################################################################

    UsersService:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                VpnCidr: { Ref: 'AWS::NoValue' }
                PeeringId: { Ref: "UsersPeeringId" }
                PeeringCidr: { Ref: "UsersPeeringCidr" }
                DynamodbReadCapacity: { Ref: "UsersDynamodbReadCapacity" }
                DynamodbWriteCapacity: { Ref: "UsersDynamodbWriteCapacity" }
                SnsApplicationArnIos: { Ref: "UsersSnsApplicationArnIos" }
                SnsApplicationArnAndroid: { Ref: "UsersSnsApplicationArnAndroid" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/users/${TemplateVersion}/users-environment.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { Ref: "UsersServiceVersion" }
            } ] }
            TimeoutInMinutes: 30
        Condition: "CreateUsersService"

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    FathomaiHostedZoneId:
        Description: "The ID of the <env>.fathomai.com public Hosted Zone"
        Value: { Ref: "PublicHostedZone" }
        Export:
            Name: { "Fn::Sub": "FathomaiHostedZoneId-${Environment}" }

    FathomaiSslCertificateAdnVirginia:
        Description: "The ARN of the *.<env>.fathomai.com ACM Certificate (in us-east-1)"
        Value: { "Fn::Sub": "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${FathomaiSslCertificateArnVirginia}" }
        Export:
            Name: { "Fn::Sub": "FathomaiSslCertificateArnVirginia-${Environment}" }

    QuerypostgresLambdaArn:
        Description: "The ARN of the query-postgres Lambda"
        Value: { "Fn::GetAtt": [ "QuerypostgresLambda", "Arn" ] }
        Export:
            Name: { "Fn::Sub": "QuerypostgresLambdaArn-${Environment}" }

    QuerypostgresPolicyArn:
        Description: "The ARN of the query-postgres IAM Policy"
        Value: { Ref: "QuerypostgresExecutionPolicy" }
        Export:
            Name: { "Fn::Sub": "QuerypostgresPolicyArn-${Environment}" }
