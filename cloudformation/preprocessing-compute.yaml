# A template that creates a compute environment
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Batch Compute Environment for the pre-processing pipeline"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    MultiAz:
        Type: "String"
        AllowedValues: [ "true", "false" ]
        Description: "Whether to create instances in multiple AZs.  This has an additional cost."

    VpcId:
        Type: "String"
        Description: "ID of the VPC"

    VpcCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."

    PrivateHostedZoneId:
        Type: "String"
        Description: "The ID of the private hosted zone"

    PrivateSubnetAlphaId:
        Type: "String"
        Description: "The ID of private subnet alpha"

    PrivateSubnetBetaId:
        Type: "String"
        Description: "The ID of private subnet beta"

    PublicSubnetAlphaId:
        Type: "String"
        Description: "The ID of public subnet alpha"

    InstanceSize:
        Type: "String"
        AllowedValues: [
            "c3", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
            "c4", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
            "d2", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
            "f1", "f1.2xlarge", "f1.16xlarge",
            "g2", "g2.2xlarge", "g2.8xlarge",
            "i2", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
            "i3", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
            "m3", "m3.medium", "m3.large", "m3.2xlarge", "m3.xlarge",
            "m4", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
            "optimal",
            "p2", "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
            "r3", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
            "r4", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
            "x1", "x1.16xlarge", "x1.32xlarge"
        ]
        Description: "What type the EC2 instances should be"

    Ami:
        Type: "AWS::EC2::Image::Id"
        Default: "ami-45224425"
        Description: "The AMI to build the Compute Environment EC2 instances from"

    Keypair:
        Type: "String"
        Default: ""
        Description: "A SSH keypair to grant access to instances"
        
Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"

          - Label: { default: "Networking" }
            Parameters:
              - "MultiAz"
              - "PrivateHostedZoneId"
              - "PrivateSubnetAlphaId"
              - "PrivateSubnetBetaId"
              - "PublicSubnetAlphaId"
              - "VpcId"
              - "VpcCidr"

          - Label: { default: "Configuration" }
            Parameters:
              - "Ami"
              - "InstanceSize"
              - "Keypair"

        ParameterLabels:
            Ami: { default: "EC2 AMI" }
            Environment: { default: "Environment" }
            InstanceSize: { default: "EC2 Instance Size" }
            Keypair: { default: "EC2 Keypair" }
            MultiAz: { default: "Multi AZ?" }
            PrivateHostedZoneId: { default: "Private Hosted Zone ID" }
            PrivateSubnetAlphaId: { default: "Private Subnet Alpha ID" }
            PrivateSubnetBetaId: { default: "Private Subnet Alpha ID" }
            PublicSubnetAlphaId: { default: "Public Subnet Alpha ID" }
            VpcCidr: { default: "VPC CIDR block" }

Mappings:
    RegionAmiMappings:
        us-east-1:      { "bastion": "ami-1d4e7a66" }
        us-west-2:      { "bastion": "ami-8803e0f0" }

Conditions:
    MultiAz: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "MultiAz" }, "false" ] } ] }
    AllowSsh: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "Keypair" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  EFS
    ##########################################################################################################

    EfsSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group which allows access to the Elastic File System"
            VpcId: { Ref: "VpcId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-efs" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    EfsSecurityGroupSelfReference:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: { Ref: "EfsSecurityGroup" }
            IpProtocol: "tcp"
            FromPort: "0"
            ToPort: "65535"
            SourceSecurityGroupId: { Ref: "EfsSecurityGroup" }

    EfsFileSystem:
        Type: "AWS::EFS::FileSystem"
        Properties:
            FileSystemTags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
            PerformanceMode: "generalPurpose"

    EfsMountTargetAlpha:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetAlphaId" }

    EfsMountTargetBeta:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: { Ref: "EfsFileSystem" }
            SecurityGroups:
              - { Ref: "EfsSecurityGroup" }
            SubnetId: { Ref: "PrivateSubnetBetaId" }
        Condition: "MultiAz"

    EfsDnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
          HostedZoneId: { Ref: "PrivateHostedZoneId" }
          Name: "efs.internal"
          Type: "CNAME"
          TTL: '600'
          ResourceRecords:
            - { "Fn::Sub": "${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com." }

    ##########################################################################################################
    ##  KMS
    ##########################################################################################################

    ParameterStoreKey:
        Type: "AWS::KMS::Key"
        Properties:
            Description: { "Fn::Sub": "Encryption for configuration parameters in the ${Environment} cluster" }
            Enabled: true
            EnableKeyRotation: false
            KeyPolicy:
                Version: "2012-10-17"
                Id: "default"
                Statement:
                  - Sid: "Enable IAM User Permissions"
                    Effect: "Allow"
                    Principal:
                        AWS: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root" }
                    Action: "kms:*"
                    Resource: "*"

    ParameterStoreKeyAlias:
        Type: "AWS::KMS::Alias"
        Properties:
            AliasName: { "Fn::Sub": "alias/preprocessing/${Environment}" }
            TargetKeyId: { Ref: "ParameterStoreKey" }

    ##########################################################################################################
    ##  EC2
    ##########################################################################################################

    Ec2InstanceStartupRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "ec2.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-${AWS::Region}" }

    Ec2InstanceStartupProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles: [ { Ref: "Ec2InstanceStartupRole" } ]

    Ec2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group for preprocessing EC2 instances"
            VpcId: { Ref: "VpcId" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: { "Fn::Sub": "10.${VpcCidr}.0.0/16" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    Ec2SecurityGroupInternalSsh:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group allowing SSH access"
            VpcId: { Ref: "VpcId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-compute-ec2-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    ##########################################################################################################
    ##  BATCH
    ##########################################################################################################

    BatchComputeEnvironment:
        Type: "AWS::Batch::ComputeEnvironment"
        Properties:
            ComputeEnvironmentName: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            ComputeResources:
                Ec2KeyPair: { Ref: "Keypair" }
                InstanceRole: { Ref: "Ec2InstanceStartupProfile" }
                InstanceTypes: [ { Ref: "InstanceSize" } ]
                MaxvCpus: 16
                MinvCpus: 0
                SecurityGroupIds:
                  - { Ref: "Ec2SecurityGroup" }
                  - { Ref: "EfsSecurityGroup" }
                  - { Ref: "Ec2SecurityGroupInternalSsh" }
                Subnets: { "Fn::If": [
                    "MultiAz",
                    [ { Ref: "PrivateSubnetAlphaId" }, { Ref: "PrivateSubnetBetaId" } ],
                    [ { Ref: "PrivateSubnetAlphaId" } ]
                ]}
                Tags:
                    Name: { "Fn::Sub": "preprocessing-${Environment}-compute" }
                    Management: "managed"
                    Project: "preprocessing"
                    Environment: { Ref: "Environment" }
                    Service: "batch"
                Type: "EC2"
            ServiceRole: { "Fn::ImportValue": "BatchServiceRole" }
            State: "ENABLED"
            Type: "MANAGED"

    BatchJobQueue:
        Type: "AWS::Batch::JobQueue"
        Properties:
            ComputeEnvironmentOrder:
              - ComputeEnvironment: { Ref: "BatchComputeEnvironment" }
                Order: 1
            JobQueueName: { "Fn::Sub": "preprocessing-${Environment}-compute" }
            Priority: 1
            State: "ENABLED"

    ##########################################################################################################
    ##  BASTION
    ##########################################################################################################

    Ec2SecurityGroupExternalSsh:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Enable external SSH access"
            VpcId: { Ref: "VpcId" }
            SecurityGroupIngress:
              - IpProtocol: "tcp"
                FromPort: "22"
                ToPort: "22"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-bastion-ssh" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
        Condition: "AllowSsh"

    Ec2SecurityGroupInternalSshRule:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            FromPort: "22"
            GroupId: { Ref: "Ec2SecurityGroupInternalSsh" }
            IpProtocol: "tcp"
            SourceSecurityGroupId: { Ref: "Ec2SecurityGroupExternalSsh" }
            ToPort: "22"
        Condition: "AllowSsh"

    BastionInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: { "Fn::FindInMap": [ "RegionAmiMappings", { Ref: "AWS::Region" }, "bastion" ] }
            InstanceInitiatedShutdownBehavior: "stop"
            InstanceType: "t2.nano"
            KeyName: { Ref: "Keypair" }
            SecurityGroupIds: [ { Ref: "Ec2SecurityGroupExternalSsh" } ]
            SubnetId: { Ref: "PublicSubnetAlphaId" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-bastion" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "bastion" }
            UserData: ""
        Condition: "AllowSsh"

    BastionElasticIp:
        Type: "AWS::EC2::EIP"
        Properties:
            InstanceId: { Ref: "BastionInstance" }
            Domain: "vpc"
        Condition: "AllowSsh"

    ##########################################################################################################
    ##  MONITORING
    ##########################################################################################################

    LambdaMonitoringRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        Effect: "Allow"
                        Resource: "*"

                      - Action:
                          - "batch:DescribeComputeEnvironments"
                          - "batch:ListJobs"
                          - "cloudwatch:PutMetricData"
                          - "ec2:DescribeInstances"
                          - "elasticfilesystem:DescribeFileSystems"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "preprocessing-${Environment}-monitor-lambda-${AWS::Region}" }

    MonitoringLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: "lambdas/pipeline_monitor.zip"

            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    BATCH_COMPUTE_ENVIRONMENT: { Ref: "BatchComputeEnvironment" }
                    BATCH_JOB_QUEUE: { Ref: "BatchJobQueue" }
                    BATCH_EFS_ID: { Ref: "EfsFileSystem" }
            Handler: "pipeline_monitor.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaMonitoringRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "preprocessing-${Environment}-pipeline-monitor" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "preprocessing-${Environment}-pipeline-monitor" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "preprocessing" }
              - { Key: "Environment", Value: { Ref: "Environment" } }

    MonitoringLambdaScheduledRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: "ScheduledRule"
            ScheduleExpression: "rate(1 minute)"
            State: "ENABLED"
            Targets:
              - Arn: { "Fn::GetAtt": [ "MonitoringLambda", "Arn" ] }
                Id: "TargetFunctionV1"

    MonitoringLambdaInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: { Ref: "MonitoringLambda" }
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "MonitoringLambdaScheduledRule", "Arn" ] }

Outputs:

    EfsId:
        Description: "The id of the Elastic File System"
        Value: { Ref: "EfsFileSystem" }

    JobQueueArn:
        Description: "The ARN of the Job Queue"
        Value: { Ref: "BatchJobQueue" }

    ComputeEnvironmentArn:
        Description: "The ARN of the ComputeEnvironment"
        Value: { Ref: "BatchComputeEnvironment" }
