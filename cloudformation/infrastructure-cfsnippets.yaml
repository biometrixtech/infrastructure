#
# Copyright 2018 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a CloudFormation custom resource which allows running python code snippets in CF templates"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    AdditionalIamPermissions:
        Type: "String"
        Description: "A comma-delimited list of additional IAM permissions"

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterLabels:
            Environment: { default: "Environment" }
            AdditionalIamPermissions: { default: "Additional IAM Permissions" }

Conditions:
    CreateAdditionalIamPermissions: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "AdditionalIamPermissions" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  IAM
    ##########################################################################################################

    ExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "cloudwatch:PutMetricData"
                        Effect: "Allow"
                        Resource: "*"
                      - { "Fn::If": [
                            "CreateAdditionalIamPermissions",
                            {
                                Action: { "Fn::Split": [ ",", { Ref: "AdditionalIamPermissions" } ] },
                                Effect: "Allow",
                                Resource: "*"
                            },
                            { Ref: "AWS::NoValue" }
                        ] }

            RoleName: { "Fn::Sub": "infrastructure-${Environment}-cfsnippets-execute-${AWS::Region}" }

    ##########################################################################################################
    ##  EXECUTION
    ##########################################################################################################

    ExecutionLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    from botocore.vendored import requests
                    import boto3
                    import json
                    import os
                    import traceback

                    class CloudFormationHandler:
                        def __init__(self, event, context):
                            self.event = event
                            self.log_stream_name = context.log_stream_name
                            self.physical_resource_id = event.get('PhysicalResourceId', self.log_stream_name)

                        def _respond(self, success, response_data=None, reason=None):
                            try:
                                json_response_body = json.dumps({
                                    'Status': 'SUCCESS' if success else 'FAILED',
                                    'Reason': reason or 'Log Stream: ' + self.log_stream_name,
                                    'PhysicalResourceId': self.physical_resource_id,
                                    'StackId': self.event['StackId'],
                                    'RequestId': self.event['RequestId'],
                                    'LogicalResourceId': self.event['LogicalResourceId'],
                                    'Data': response_data or {}
                                }, default=json_serial)
                                print(json_response_body)
                                requests.put(
                                    self.event['ResponseURL'],
                                    data=json_response_body,
                                    headers={'content-type': '', 'content-length': str(len(json_response_body))}
                                )
                            except Exception as e:
                                print("send(..) failed executing requests.put(..): " + str(e))

                        def process(self):
                            try:
                                # Execute the appropriate action
                                if self.event['RequestType'] in ['Create', 'Update']:
                                    properties = self.event.get('UpdatedResourceProperties', self.event['ResourceProperties'])
                                    self.physical_resource_id, data = self.execute(properties['Code'], properties.get('Environment', {}).get('Variables', {}))
                                    print("physical_resource_id={}".format(self.physical_resource_id))
                                    self._respond(True, response_data=data)
                                else:
                                    self._respond(True)
                            except Exception as e:
                                self._respond(False, reason=str(e) + "\n\n" + traceback.format_exc())

                        def execute(self, code, environment):
                            # Save the original environment variables to restore later; then merge in any overrides
                            old_environment = os.environ
                            try:
                                os.environ.update(environment)
                                # It goes without saying that it would be crazy to run this with user-controllable
                                # input.  Just Don't Do That.
                                locals = {'os': os}
                                exec(code, locals, locals)
                            finally:
                                os.environ = old_environment
                            return str(locals.get('physical_resource_id', self.physical_resource_id)), locals.get('data')


                    def handler(event, context):
                        print(json.dumps(event, default=json_serial, indent=4))
                        CloudFormationHandler(event, context).process()


                    def json_serial(obj):
                        """
                        JSON serializer for objects not serializable by default json code
                        """
                        from datetime import datetime
                        if isinstance(obj, datetime):
                            serial = obj.isoformat()
                            return serial
                        raise TypeError("Type not serializable")

            Environment:
                Variables:
                    AWS_ACCOUNTID: { Ref: "AWS::AccountId" }
            Handler: "index.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "infrastructure-${Environment}-cfsnippets-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "infrastructure-${Environment}-cfsnippets-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "infrastructure" }
              - { Key: "Environment", Value: { Ref: "Environment" } }


    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    ExecutionArn:
        Description: "The ARN of the lambda function"
        Value: { "Fn::GetAtt": [ "ExecutionLambda", "Arn" ] }
        Export:
            Name: { "Fn::Sub": "CfsnippetsArn-${Environment}" }
